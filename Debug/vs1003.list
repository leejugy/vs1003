
vs1003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004378  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800460c  0800460c  00038700  2**0
                  CONTENTS
  4 .ARM          00000008  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004614  08004614  00038700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00018700  20000000  0800461c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20018700  0801cd1c  00038700  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018990  0801cd1c  00038990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00038700  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00038730  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad19  00000000  00000000  00038773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f26  00000000  00000000  0004348c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  000453b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071b  00000000  00000000  00045d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016afc  00000000  00000000  0004642b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d570  00000000  00000000  0005cf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087ad5  00000000  00000000  0006a497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029b0  00000000  00000000  000f1f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000f491c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20018700 	.word	0x20018700
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004500 	.word	0x08004500

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20018704 	.word	0x20018704
 80001dc:	08004500 	.word	0x08004500

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <MX_DMA_Init+0x3c>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	203a      	movs	r0, #58	; 0x3a
 80005a4:	f000 fecf 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005a8:	203a      	movs	r0, #58	; 0x3a
 80005aa:	f000 fee8 	bl	800137e <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_GPIO_Init+0x94>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <MX_GPIO_Init+0x94>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_GPIO_Init+0x94>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_GPIO_Init+0x94>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <MX_GPIO_Init+0x94>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_GPIO_Init+0x94>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2116      	movs	r1, #22
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <MX_GPIO_Init+0x98>)
 8000610:	f001 fbdc 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000614:	2316      	movs	r3, #22
 8000616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <MX_GPIO_Init+0x98>)
 800062c:	f001 fa32 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000630:	2308      	movs	r3, #8
 8000632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4619      	mov	r1, r3
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_GPIO_Init+0x98>)
 8000644:	f001 fa26 	bl	8001a94 <HAL_GPIO_Init>

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40020000 	.word	0x40020000

08000658 <HAL_UART_RxHalfCpltCallback>:
uint16_t VS1003_ReadReg(uint8_t add);
void VS1003_init();
void SDI_Send(uint8_t *MP3_Data,size_t MP3_Len);

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_UART_RxHalfCpltCallback+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	d104      	bne.n	8000676 <HAL_UART_RxHalfCpltCallback+0x1e>
		HAL_UART_Receive_DMA(&huart1, &uart_rx_val, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	4905      	ldr	r1, [pc, #20]	; (8000684 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <HAL_UART_RxHalfCpltCallback+0x28>)
 8000672:	f002 fd50 	bl	8003116 <HAL_UART_Receive_DMA>
	}
  UNUSED(huart);
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2001879c 	.word	0x2001879c
 8000684:	2001873c 	.word	0x2001873c

08000688 <uart_send>:

void uart_send(uint8_t uart_num,char *fmt,...){
 8000688:	b40e      	push	{r1, r2, r3}
 800068a:	b580      	push	{r7, lr}
 800068c:	b085      	sub	sp, #20
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	va_start(arg,fmt);
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	60fb      	str	r3, [r7, #12]
	vsnprintf((char *)uart_send_buffer,32,fmt,arg);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	69fa      	ldr	r2, [r7, #28]
 800069e:	2120      	movs	r1, #32
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <uart_send+0x48>)
 80006a2:	f003 fa9b 	bl	8003bdc <vsniprintf>

	if(uart_num==1){
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d105      	bne.n	80006b8 <uart_send+0x30>
		HAL_UART_Transmit(&huart1, uart_send_buffer, 32, 10);
 80006ac:	230a      	movs	r3, #10
 80006ae:	2220      	movs	r2, #32
 80006b0:	4907      	ldr	r1, [pc, #28]	; (80006d0 <uart_send+0x48>)
 80006b2:	4808      	ldr	r0, [pc, #32]	; (80006d4 <uart_send+0x4c>)
 80006b4:	f002 fca4 	bl	8003000 <HAL_UART_Transmit>
	}
	va_end(arg);
	memset(uart_send_buffer,0,32);
 80006b8:	2220      	movs	r2, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <uart_send+0x48>)
 80006be:	f003 fa9b 	bl	8003bf8 <memset>
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006cc:	b003      	add	sp, #12
 80006ce:	4770      	bx	lr
 80006d0:	2001871c 	.word	0x2001871c
 80006d4:	2001879c 	.word	0x2001879c

080006d8 <VS1003_init>:



void VS1003_init(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint16_t _16_data=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	80bb      	strh	r3, [r7, #4]

  HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	486b      	ldr	r0, [pc, #428]	; (8000894 <VS1003_init+0x1bc>)
 80006e8:	f001 fb70 	bl	8001dcc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 fd2b 	bl	8001148 <HAL_Delay>
  HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2104      	movs	r1, #4
 80006f6:	4867      	ldr	r0, [pc, #412]	; (8000894 <VS1003_init+0x1bc>)
 80006f8:	f001 fb68 	bl	8001dcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XDCS_PORT, XDCS_PIN, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2102      	movs	r1, #2
 8000700:	4864      	ldr	r0, [pc, #400]	; (8000894 <VS1003_init+0x1bc>)
 8000702:	f001 fb63 	bl	8001dcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XCS_PORT, XCS_PIN, GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2110      	movs	r1, #16
 800070a:	4862      	ldr	r0, [pc, #392]	; (8000894 <VS1003_init+0x1bc>)
 800070c:	f001 fb5e 	bl	8001dcc <HAL_GPIO_WritePin>
  uint8_t retry = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	71fb      	strb	r3, [r7, #7]

  while(1){
  	_16_data = VS1003_ReadReg(ADD_MODE);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f9a5 	bl	8000a64 <VS1003_ReadReg>
 800071a:	4603      	mov	r3, r0
 800071c:	80bb      	strh	r3, [r7, #4]
  	VS1003_WriteReg(ADD_MODE,0x0804);
 800071e:	f640 0104 	movw	r1, #2052	; 0x804
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f94e 	bl	80009c4 <VS1003_WriteReg>
  	if(_16_data==0x800 || retry++>=100){
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800072e:	d004      	beq.n	800073a <VS1003_init+0x62>
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	71fa      	strb	r2, [r7, #7]
 8000736:	2b63      	cmp	r3, #99	; 0x63
 8000738:	d9ec      	bls.n	8000714 <VS1003_init+0x3c>
  		uart_send(1,"ADD_MODE : 0x%04X\n",_16_data);
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	461a      	mov	r2, r3
 800073e:	4956      	ldr	r1, [pc, #344]	; (8000898 <VS1003_init+0x1c0>)
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff ffa1 	bl	8000688 <uart_send>
  		break;
 8000746:	bf00      	nop
  	}
  }

  _16_data = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	80bb      	strh	r3, [r7, #4]
  retry = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	71fb      	strb	r3, [r7, #7]
  while(1){
    _16_data = VS1003_ReadReg(ADD_CLOCKF);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f987 	bl	8000a64 <VS1003_ReadReg>
 8000756:	4603      	mov	r3, r0
 8000758:	80bb      	strh	r3, [r7, #4]
    VS1003_WriteReg(ADD_CLOCKF,0x9BE8);
 800075a:	f649 31e8 	movw	r1, #39912	; 0x9be8
 800075e:	2003      	movs	r0, #3
 8000760:	f000 f930 	bl	80009c4 <VS1003_WriteReg>
    if(_16_data==0x9BE8 || retry++>=100){
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	f649 32e8 	movw	r2, #39912	; 0x9be8
 800076a:	4293      	cmp	r3, r2
 800076c:	d004      	beq.n	8000778 <VS1003_init+0xa0>
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	71fa      	strb	r2, [r7, #7]
 8000774:	2b63      	cmp	r3, #99	; 0x63
 8000776:	d9eb      	bls.n	8000750 <VS1003_init+0x78>
    	uart_send(1,"ADD_CLOCKF : 0x%04X\n",_16_data);
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	461a      	mov	r2, r3
 800077c:	4947      	ldr	r1, [pc, #284]	; (800089c <VS1003_init+0x1c4>)
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff ff82 	bl	8000688 <uart_send>
    	break;
 8000784:	bf00      	nop
   	}
  }

  _16_data = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	80bb      	strh	r3, [r7, #4]
  retry = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	71fb      	strb	r3, [r7, #7]
  while(1){
    _16_data = VS1003_ReadReg(ADD_AUDATA);
 800078e:	2005      	movs	r0, #5
 8000790:	f000 f968 	bl	8000a64 <VS1003_ReadReg>
 8000794:	4603      	mov	r3, r0
 8000796:	80bb      	strh	r3, [r7, #4]
    VS1003_WriteReg(ADD_AUDATA,_32kbps_stereo_sampling_rate);
 8000798:	f645 51c1 	movw	r1, #24001	; 0x5dc1
 800079c:	2005      	movs	r0, #5
 800079e:	f000 f911 	bl	80009c4 <VS1003_WriteReg>
    if(_16_data==_32kbps_stereo_sampling_rate || retry++>=100){
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	f645 52c1 	movw	r2, #24001	; 0x5dc1
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d004      	beq.n	80007b6 <VS1003_init+0xde>
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	71fa      	strb	r2, [r7, #7]
 80007b2:	2b63      	cmp	r3, #99	; 0x63
 80007b4:	d9eb      	bls.n	800078e <VS1003_init+0xb6>
    	uart_send(1,"ADD_AUDATA : 0x%04X\n",_16_data);
 80007b6:	88bb      	ldrh	r3, [r7, #4]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4939      	ldr	r1, [pc, #228]	; (80008a0 <VS1003_init+0x1c8>)
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff ff63 	bl	8000688 <uart_send>
    	break;
 80007c2:	bf00      	nop
   	}
  }

  _16_data = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	80bb      	strh	r3, [r7, #4]
  retry = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	71fb      	strb	r3, [r7, #7]
  while(1){
    _16_data = VS1003_ReadReg(ADD_VOL);
 80007cc:	200b      	movs	r0, #11
 80007ce:	f000 f949 	bl	8000a64 <VS1003_ReadReg>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]
    VS1003_WriteReg(ADD_VOL,current_vol);
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <VS1003_init+0x1cc>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	200b      	movs	r0, #11
 80007de:	f000 f8f1 	bl	80009c4 <VS1003_WriteReg>
    if(_16_data==current_vol || retry++>=100){
 80007e2:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <VS1003_init+0x1cc>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	88ba      	ldrh	r2, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d004      	beq.n	80007f6 <VS1003_init+0x11e>
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	71fa      	strb	r2, [r7, #7]
 80007f2:	2b63      	cmp	r3, #99	; 0x63
 80007f4:	d9ea      	bls.n	80007cc <VS1003_init+0xf4>
    	uart_send(1,"ADD_VOL : 0x%04X\n",_16_data);
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	461a      	mov	r2, r3
 80007fa:	492b      	ldr	r1, [pc, #172]	; (80008a8 <VS1003_init+0x1d0>)
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff ff43 	bl	8000688 <uart_send>
    	break;
 8000802:	bf00      	nop
   	}
  }

  _16_data = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	80bb      	strh	r3, [r7, #4]
  retry = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	71fb      	strb	r3, [r7, #7]
  while(1){
    _16_data = VS1003_ReadReg(ADD_DECODE_TIME);
 800080c:	2004      	movs	r0, #4
 800080e:	f000 f929 	bl	8000a64 <VS1003_ReadReg>
 8000812:	4603      	mov	r3, r0
 8000814:	80bb      	strh	r3, [r7, #4]
    VS1003_WriteReg(ADD_DECODE_TIME,0x0000);
 8000816:	2100      	movs	r1, #0
 8000818:	2004      	movs	r0, #4
 800081a:	f000 f8d3 	bl	80009c4 <VS1003_WriteReg>
    if(_16_data==0x0000 || retry++>=100){
 800081e:	88bb      	ldrh	r3, [r7, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d004      	beq.n	800082e <VS1003_init+0x156>
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	71fa      	strb	r2, [r7, #7]
 800082a:	2b63      	cmp	r3, #99	; 0x63
 800082c:	d9ee      	bls.n	800080c <VS1003_init+0x134>
    	uart_send(1,"ADD_DECODE_TIME : 0x%04X\n",_16_data);
 800082e:	88bb      	ldrh	r3, [r7, #4]
 8000830:	461a      	mov	r2, r3
 8000832:	491e      	ldr	r1, [pc, #120]	; (80008ac <VS1003_init+0x1d4>)
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ff27 	bl	8000688 <uart_send>
    	break;
 800083a:	bf00      	nop
   	}
  }
  uint8_t tx_val = 0xff;
 800083c:	23ff      	movs	r3, #255	; 0xff
 800083e:	70fb      	strb	r3, [r7, #3]



  HAL_GPIO_WritePin(XDCS_PORT, XDCS_PIN, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2102      	movs	r1, #2
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <VS1003_init+0x1bc>)
 8000846:	f001 fac1 	bl	8001dcc <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 800084a:	1cf9      	adds	r1, r7, #3
 800084c:	230a      	movs	r3, #10
 800084e:	2201      	movs	r2, #1
 8000850:	4817      	ldr	r0, [pc, #92]	; (80008b0 <VS1003_init+0x1d8>)
 8000852:	f001 ffb6 	bl	80027c2 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 8000856:	1cf9      	adds	r1, r7, #3
 8000858:	230a      	movs	r3, #10
 800085a:	2201      	movs	r2, #1
 800085c:	4814      	ldr	r0, [pc, #80]	; (80008b0 <VS1003_init+0x1d8>)
 800085e:	f001 ffb0 	bl	80027c2 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 8000862:	1cf9      	adds	r1, r7, #3
 8000864:	230a      	movs	r3, #10
 8000866:	2201      	movs	r2, #1
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <VS1003_init+0x1d8>)
 800086a:	f001 ffaa 	bl	80027c2 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 800086e:	1cf9      	adds	r1, r7, #3
 8000870:	230a      	movs	r3, #10
 8000872:	2201      	movs	r2, #1
 8000874:	480e      	ldr	r0, [pc, #56]	; (80008b0 <VS1003_init+0x1d8>)
 8000876:	f001 ffa4 	bl	80027c2 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(XDCS_PORT, XDCS_PIN, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2102      	movs	r1, #2
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <VS1003_init+0x1bc>)
 8000880:	f001 faa4 	bl	8001dcc <HAL_GPIO_WritePin>

  HAL_Delay(20);
 8000884:	2014      	movs	r0, #20
 8000886:	f000 fc5f 	bl	8001148 <HAL_Delay>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40020000 	.word	0x40020000
 8000898:	08004518 	.word	0x08004518
 800089c:	0800452c 	.word	0x0800452c
 80008a0:	08004544 	.word	0x08004544
 80008a4:	200186a0 	.word	0x200186a0
 80008a8:	0800455c 	.word	0x0800455c
 80008ac:	08004570 	.word	0x08004570
 80008b0:	20018740 	.word	0x20018740

080008b4 <SDI_Send>:

void SDI_Send(uint8_t *MP3_Data,size_t MP3_Len){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(XDCS_PORT, XDCS_PIN, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2102      	movs	r1, #2
 80008c2:	480f      	ldr	r0, [pc, #60]	; (8000900 <SDI_Send+0x4c>)
 80008c4:	f001 fa82 	bl	8001dcc <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<MP3_Len;i++){
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e00a      	b.n	80008e4 <SDI_Send+0x30>
		HAL_SPI_Transmit(&hspi1,MP3_Data++,1,10);
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	1c4b      	adds	r3, r1, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	230a      	movs	r3, #10
 80008d6:	2201      	movs	r2, #1
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <SDI_Send+0x50>)
 80008da:	f001 ff72 	bl	80027c2 <HAL_SPI_Transmit>
	for(uint8_t i=0;i<MP3_Len;i++){
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	3301      	adds	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d8f0      	bhi.n	80008ce <SDI_Send+0x1a>
	}
	HAL_GPIO_WritePin(XDCS_PORT, XDCS_PIN, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2102      	movs	r1, #2
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <SDI_Send+0x4c>)
 80008f2:	f001 fa6b 	bl	8001dcc <HAL_GPIO_WritePin>
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020000 	.word	0x40020000
 8000904:	20018740 	.word	0x20018740

08000908 <control_mp3>:

void control_mp3(uint32_t *data){
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if(uart_rx_val == 'r'){
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <control_mp3+0xa8>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b72      	cmp	r3, #114	; 0x72
 8000916:	d10a      	bne.n	800092e <control_mp3+0x26>
		uart_send(1,"restart!\n");
 8000918:	4926      	ldr	r1, [pc, #152]	; (80009b4 <control_mp3+0xac>)
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff feb4 	bl	8000688 <uart_send>
	  *data=0;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
	  uart_rx_val = 0;
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <control_mp3+0xa8>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
		uart_send(1,"plus vol\n");
	  current_vol -=0x0101;
	  VS1003_WriteReg(ADD_VOL,current_vol);
	  uart_rx_val=0;
	}
}
 800092c:	e03b      	b.n	80009a6 <control_mp3+0x9e>
	else if(uart_rx_val == '-' && current_vol<(0xFDFD)){
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <control_mp3+0xa8>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b2d      	cmp	r3, #45	; 0x2d
 8000934:	d11a      	bne.n	800096c <control_mp3+0x64>
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <control_mp3+0xb0>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	f64f 52fc 	movw	r2, #65020	; 0xfdfc
 800093e:	4293      	cmp	r3, r2
 8000940:	d814      	bhi.n	800096c <control_mp3+0x64>
		uart_send(1,"minus vol\n");
 8000942:	491e      	ldr	r1, [pc, #120]	; (80009bc <control_mp3+0xb4>)
 8000944:	2001      	movs	r0, #1
 8000946:	f7ff fe9f 	bl	8000688 <uart_send>
	  current_vol +=0x0101;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <control_mp3+0xb0>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	f203 1301 	addw	r3, r3, #257	; 0x101
 8000952:	b29a      	uxth	r2, r3
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <control_mp3+0xb0>)
 8000956:	801a      	strh	r2, [r3, #0]
	  VS1003_WriteReg(ADD_VOL,current_vol);
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <control_mp3+0xb0>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	200b      	movs	r0, #11
 8000960:	f000 f830 	bl	80009c4 <VS1003_WriteReg>
	  uart_rx_val=0;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <control_mp3+0xa8>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
}
 800096a:	e01c      	b.n	80009a6 <control_mp3+0x9e>
	else if(uart_rx_val == '+' && (current_vol>0x0101)){
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <control_mp3+0xa8>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b2b      	cmp	r3, #43	; 0x2b
 8000972:	d118      	bne.n	80009a6 <control_mp3+0x9e>
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <control_mp3+0xb0>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800097c:	d313      	bcc.n	80009a6 <control_mp3+0x9e>
		uart_send(1,"plus vol\n");
 800097e:	4910      	ldr	r1, [pc, #64]	; (80009c0 <control_mp3+0xb8>)
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fe81 	bl	8000688 <uart_send>
	  current_vol -=0x0101;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <control_mp3+0xb0>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <control_mp3+0xb0>)
 8000992:	801a      	strh	r2, [r3, #0]
	  VS1003_WriteReg(ADD_VOL,current_vol);
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <control_mp3+0xb0>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	200b      	movs	r0, #11
 800099c:	f000 f812 	bl	80009c4 <VS1003_WriteReg>
	  uart_rx_val=0;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <control_mp3+0xa8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2001873c 	.word	0x2001873c
 80009b4:	0800458c 	.word	0x0800458c
 80009b8:	200186a0 	.word	0x200186a0
 80009bc:	08004598 	.word	0x08004598
 80009c0:	080045a4 	.word	0x080045a4

080009c4 <VS1003_WriteReg>:

void VS1003_WriteReg(uint8_t add, uint16_t val){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	460a      	mov	r2, r1
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	4613      	mov	r3, r2
 80009d2:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_val;

	while(HAL_GPIO_ReadPin(DREQ_PORT, DREQ_PIN) == 0);
 80009d4:	bf00      	nop
 80009d6:	2108      	movs	r1, #8
 80009d8:	4820      	ldr	r0, [pc, #128]	; (8000a5c <VS1003_WriteReg+0x98>)
 80009da:	f001 f9df 	bl	8001d9c <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0f8      	beq.n	80009d6 <VS1003_WriteReg+0x12>

	HAL_GPIO_WritePin(XDCS_PORT, XDCS_PIN, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2102      	movs	r1, #2
 80009e8:	481c      	ldr	r0, [pc, #112]	; (8000a5c <VS1003_WriteReg+0x98>)
 80009ea:	f001 f9ef 	bl	8001dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(XCS_PORT, XCS_PIN, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2110      	movs	r1, #16
 80009f2:	481a      	ldr	r0, [pc, #104]	; (8000a5c <VS1003_WriteReg+0x98>)
 80009f4:	f001 f9ea 	bl	8001dcc <HAL_GPIO_WritePin>

	tx_val = VS1003_W;
 80009f8:	2302      	movs	r3, #2
 80009fa:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 80009fc:	f107 010f 	add.w	r1, r7, #15
 8000a00:	230a      	movs	r3, #10
 8000a02:	2201      	movs	r2, #1
 8000a04:	4816      	ldr	r0, [pc, #88]	; (8000a60 <VS1003_WriteReg+0x9c>)
 8000a06:	f001 fedc 	bl	80027c2 <HAL_SPI_Transmit>
	tx_val = add;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 8000a0e:	f107 010f 	add.w	r1, r7, #15
 8000a12:	230a      	movs	r3, #10
 8000a14:	2201      	movs	r2, #1
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <VS1003_WriteReg+0x9c>)
 8000a18:	f001 fed3 	bl	80027c2 <HAL_SPI_Transmit>
	tx_val = val>>8;
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 8000a26:	f107 010f 	add.w	r1, r7, #15
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <VS1003_WriteReg+0x9c>)
 8000a30:	f001 fec7 	bl	80027c2 <HAL_SPI_Transmit>
	tx_val = val;
 8000a34:	88bb      	ldrh	r3, [r7, #4]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 8000a3a:	f107 010f 	add.w	r1, r7, #15
 8000a3e:	230a      	movs	r3, #10
 8000a40:	2201      	movs	r2, #1
 8000a42:	4807      	ldr	r0, [pc, #28]	; (8000a60 <VS1003_WriteReg+0x9c>)
 8000a44:	f001 febd 	bl	80027c2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(XCS_PORT, XCS_PIN, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <VS1003_WriteReg+0x98>)
 8000a4e:	f001 f9bd 	bl	8001dcc <HAL_GPIO_WritePin>

}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	20018740 	.word	0x20018740

08000a64 <VS1003_ReadReg>:


uint16_t VS1003_ReadReg(uint8_t add){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	uint16_t ret;
	uint8_t tx_val;
	uint8_t rx_val;

	while(HAL_GPIO_ReadPin(DREQ_PORT, DREQ_PIN) == 0);
 8000a6e:	bf00      	nop
 8000a70:	2108      	movs	r1, #8
 8000a72:	4824      	ldr	r0, [pc, #144]	; (8000b04 <VS1003_ReadReg+0xa0>)
 8000a74:	f001 f992 	bl	8001d9c <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0f8      	beq.n	8000a70 <VS1003_ReadReg+0xc>

	HAL_GPIO_WritePin(XDCS_PORT, XDCS_PIN, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2102      	movs	r1, #2
 8000a82:	4820      	ldr	r0, [pc, #128]	; (8000b04 <VS1003_ReadReg+0xa0>)
 8000a84:	f001 f9a2 	bl	8001dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(XCS_PORT, XCS_PIN, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	481d      	ldr	r0, [pc, #116]	; (8000b04 <VS1003_ReadReg+0xa0>)
 8000a8e:	f001 f99d 	bl	8001dcc <HAL_GPIO_WritePin>

	tx_val = VS1003_R;
 8000a92:	2303      	movs	r3, #3
 8000a94:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 8000a96:	f107 010d 	add.w	r1, r7, #13
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	481a      	ldr	r0, [pc, #104]	; (8000b08 <VS1003_ReadReg+0xa4>)
 8000aa0:	f001 fe8f 	bl	80027c2 <HAL_SPI_Transmit>
	tx_val = add;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1,&tx_val,1,10);
 8000aa8:	f107 010d 	add.w	r1, r7, #13
 8000aac:	230a      	movs	r3, #10
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4815      	ldr	r0, [pc, #84]	; (8000b08 <VS1003_ReadReg+0xa4>)
 8000ab2:	f001 fe86 	bl	80027c2 <HAL_SPI_Transmit>

	HAL_SPI_TransmitReceive(&hspi1,&tx_val,&rx_val,1,10);
 8000ab6:	f107 020c 	add.w	r2, r7, #12
 8000aba:	f107 010d 	add.w	r1, r7, #13
 8000abe:	230a      	movs	r3, #10
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <VS1003_ReadReg+0xa4>)
 8000ac6:	f001 ffbf 	bl	8002a48 <HAL_SPI_TransmitReceive>
	ret = rx_val<<8;
 8000aca:	7b3b      	ldrb	r3, [r7, #12]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&hspi1,&tx_val,&rx_val,1,10);
 8000ad2:	f107 020c 	add.w	r2, r7, #12
 8000ad6:	f107 010d 	add.w	r1, r7, #13
 8000ada:	230a      	movs	r3, #10
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <VS1003_ReadReg+0xa4>)
 8000ae2:	f001 ffb1 	bl	8002a48 <HAL_SPI_TransmitReceive>
	ret |= rx_val;
 8000ae6:	7b3b      	ldrb	r3, [r7, #12]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	81fb      	strh	r3, [r7, #14]

	HAL_GPIO_WritePin(XCS_PORT, XCS_PIN, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <VS1003_ReadReg+0xa0>)
 8000af6:	f001 f969 	bl	8001dcc <HAL_GPIO_WritePin>

	return ret;
 8000afa:	89fb      	ldrh	r3, [r7, #14]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40020000 	.word	0x40020000
 8000b08:	20018740 	.word	0x20018740

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b12:	f000 faa7 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b16:	f000 f845 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1a:	f7ff fd4f 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1e:	f7ff fd2d 	bl	800057c <MX_DMA_Init>
  MX_SPI1_Init();
 8000b22:	f000 f8ad 	bl	8000c80 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b26:	f000 f9cd 	bl	8000ec4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_Start_Receive_DMA(&huart1, &uart_rx_val, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4917      	ldr	r1, [pc, #92]	; (8000b8c <main+0x80>)
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <main+0x84>)
 8000b30:	f002 fc8e 	bl	8003450 <UART_Start_Receive_DMA>
  VS1003_init();
 8000b34:	f7ff fdd0 	bl	80006d8 <VS1003_init>
  uint32_t data = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	603b      	str	r3, [r7, #0]
  bool end_flag=true;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	if(HAL_GPIO_ReadPin(DREQ_PORT, DREQ_PIN)==GPIO_PIN_SET)
 8000b40:	2108      	movs	r1, #8
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <main+0x88>)
 8000b44:	f001 f92a 	bl	8001d9c <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d1f8      	bne.n	8000b40 <main+0x34>
  		{
  			if(data+32<sizeof(MP3_DATA)){
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	3320      	adds	r3, #32
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <main+0x8c>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d80a      	bhi.n	8000b6e <main+0x62>
  				SDI_Send(&MP3_DATA[data],32);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <main+0x90>)
 8000b5c:	4413      	add	r3, r2
 8000b5e:	2120      	movs	r1, #32
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fea7 	bl	80008b4 <SDI_Send>
  				data+=32;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	3320      	adds	r3, #32
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	e008      	b.n	8000b80 <main+0x74>
  			}
  			else if(end_flag){
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <main+0x74>
  				uart_send(1,"end!\n");
 8000b74:	490a      	ldr	r1, [pc, #40]	; (8000ba0 <main+0x94>)
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff fd86 	bl	8000688 <uart_send>
  				end_flag=false;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  			}
  			control_mp3(&data);
 8000b80:	463b      	mov	r3, r7
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fec0 	bl	8000908 <control_mp3>
  	if(HAL_GPIO_ReadPin(DREQ_PORT, DREQ_PIN)==GPIO_PIN_SET)
 8000b88:	e7da      	b.n	8000b40 <main+0x34>
 8000b8a:	bf00      	nop
 8000b8c:	2001873c 	.word	0x2001873c
 8000b90:	2001879c 	.word	0x2001879c
 8000b94:	40020000 	.word	0x40020000
 8000b98:	0001869f 	.word	0x0001869f
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	080045b0 	.word	0x080045b0

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2230      	movs	r2, #48	; 0x30
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 f820 	bl	8003bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <SystemClock_Config+0xc8>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <SystemClock_Config+0xc8>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <SystemClock_Config+0xc8>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a20      	ldr	r2, [pc, #128]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c20:	2304      	movs	r3, #4
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 f8e9 	bl	8001e00 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c34:	f000 f81e 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	2103      	movs	r1, #3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fb4b 	bl	80022f0 <HAL_RCC_ClockConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c60:	f000 f808 	bl	8000c74 <Error_Handler>
  }
}
 8000c64:	bf00      	nop
 8000c66:	3750      	adds	r7, #80	; 0x50
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <MX_SPI1_Init+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000ccc:	220a      	movs	r2, #10
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cd2:	f001 fced 	bl	80026b0 <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cdc:	f7ff ffca 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20018740 	.word	0x20018740
 8000ce8:	40013000 	.word	0x40013000

08000cec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_SPI_MspInit+0x84>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d12b      	bne.n	8000d66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_SPI_MspInit+0x88>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <HAL_SPI_MspInit+0x88>)
 8000d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_SPI_MspInit+0x88>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_SPI_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <HAL_SPI_MspInit+0x88>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_SPI_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d46:	23e0      	movs	r3, #224	; 0xe0
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d56:	2305      	movs	r3, #5
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d62:	f000 fe97 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40013000 	.word	0x40013000
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f976 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <DMA2_Stream2_IRQHandler+0x10>)
 8000e26:	f000 fbcb 	bl	80015c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200187e4 	.word	0x200187e4

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f002 fed0 	bl	8003c08 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20020000 	.word	0x20020000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	20018798 	.word	0x20018798
 8000e9c:	20018990 	.word	0x20018990

08000ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_USART1_UART_Init+0x50>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000efc:	f002 f830 	bl	8002f60 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f06:	f7ff feb5 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2001879c 	.word	0x2001879c
 8000f14:	40011000 	.word	0x40011000

08000f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <HAL_UART_MspInit+0xe4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d15b      	bne.n	8000ff2 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f84:	2307      	movs	r3, #7
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	481d      	ldr	r0, [pc, #116]	; (8001004 <HAL_UART_MspInit+0xec>)
 8000f90:	f000 fd80 	bl	8001a94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f98:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fa0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fd8:	f000 f9ec 	bl	80013b4 <HAL_DMA_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000fe2:	f7ff fe47 	bl	8000c74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40011000 	.word	0x40011000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	200187e4 	.word	0x200187e4
 800100c:	40026440 	.word	0x40026440

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001014:	f7ff ff44 	bl	8000ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	; (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	; (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f002 fde9 	bl	8003c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fd63 	bl	8000b0c <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	20018700 	.word	0x20018700
  ldr r2, =_sidata
 8001054:	0800461c 	.word	0x0800461c
  ldr r2, =_sbss
 8001058:	20018700 	.word	0x20018700
  ldr r4, =_ebss
 800105c:	20018990 	.word	0x20018990

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_Init+0x40>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_Init+0x40>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x40>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f94f 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fe70 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f967 	bl	800139a <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f92f 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200186a4 	.word	0x200186a4
 8001100:	200186ac 	.word	0x200186ac
 8001104:	200186a8 	.word	0x200186a8

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200186ac 	.word	0x200186ac
 800112c:	20018844 	.word	0x20018844

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20018844 	.word	0x20018844

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200186ac 	.word	0x200186ac

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff feb6 	bl	8001130 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e099      	b.n	8001504 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f0:	e00f      	b.n	8001412 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013f2:	f7ff fe9d 	bl	8001130 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	d908      	bls.n	8001412 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2220      	movs	r2, #32
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e078      	b.n	8001504 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e8      	bne.n	80013f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <HAL_DMA_Init+0x158>)
 800142c:	4013      	ands	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800143e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	2b04      	cmp	r3, #4
 800146a:	d107      	bne.n	800147c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4313      	orrs	r3, r2
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f023 0307 	bic.w	r3, r3, #7
 8001492:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	4313      	orrs	r3, r2
 800149c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d117      	bne.n	80014d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00e      	beq.n	80014d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fa6f 	bl	800199c <DMA_CheckFifoParam>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2240      	movs	r2, #64	; 0x40
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014d2:	2301      	movs	r3, #1
 80014d4:	e016      	b.n	8001504 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fa26 	bl	8001930 <DMA_CalcBaseAndBitshift>
 80014e4:	4603      	mov	r3, r0
 80014e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ec:	223f      	movs	r2, #63	; 0x3f
 80014ee:	409a      	lsls	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	f010803f 	.word	0xf010803f

08001510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_DMA_Start_IT+0x26>
 8001532:	2302      	movs	r3, #2
 8001534:	e040      	b.n	80015b8 <HAL_DMA_Start_IT+0xa8>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d12f      	bne.n	80015aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2202      	movs	r2, #2
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f9b8 	bl	80018d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	223f      	movs	r2, #63	; 0x3f
 800156a:	409a      	lsls	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0216 	orr.w	r2, r2, #22
 800157e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0208 	orr.w	r2, r2, #8
 8001596:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e005      	b.n	80015b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015b2:	2302      	movs	r3, #2
 80015b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015cc:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <HAL_DMA_IRQHandler+0x248>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a8e      	ldr	r2, [pc, #568]	; (800180c <HAL_DMA_IRQHandler+0x24c>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0a9b      	lsrs	r3, r3, #10
 80015d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	2208      	movs	r2, #8
 80015ec:	409a      	lsls	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d01a      	beq.n	800162c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0204 	bic.w	r2, r2, #4
 8001612:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2208      	movs	r2, #8
 800161a:	409a      	lsls	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001624:	f043 0201 	orr.w	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	2201      	movs	r2, #1
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d012      	beq.n	8001662 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	2201      	movs	r2, #1
 8001650:	409a      	lsls	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f043 0202 	orr.w	r2, r3, #2
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	2204      	movs	r2, #4
 8001668:	409a      	lsls	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d012      	beq.n	8001698 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00b      	beq.n	8001698 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	2204      	movs	r2, #4
 8001686:	409a      	lsls	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001690:	f043 0204 	orr.w	r2, r3, #4
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169c:	2210      	movs	r2, #16
 800169e:	409a      	lsls	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d043      	beq.n	8001730 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d03c      	beq.n	8001730 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	2210      	movs	r2, #16
 80016bc:	409a      	lsls	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d018      	beq.n	8001702 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d108      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d024      	beq.n	8001730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
 80016ee:	e01f      	b.n	8001730 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01b      	beq.n	8001730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
 8001700:	e016      	b.n	8001730 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d107      	bne.n	8001720 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0208 	bic.w	r2, r2, #8
 800171e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	2220      	movs	r2, #32
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 808f 	beq.w	8001860 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8087 	beq.w	8001860 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	2220      	movs	r2, #32
 8001758:	409a      	lsls	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b05      	cmp	r3, #5
 8001768:	d136      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0216 	bic.w	r2, r2, #22
 8001778:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001788:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <HAL_DMA_IRQHandler+0x1da>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0208 	bic.w	r2, r2, #8
 80017a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	223f      	movs	r2, #63	; 0x3f
 80017b0:	409a      	lsls	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d07e      	beq.n	80018cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	4798      	blx	r3
        }
        return;
 80017d6:	e079      	b.n	80018cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d01d      	beq.n	8001822 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10d      	bne.n	8001810 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d031      	beq.n	8001860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
 8001804:	e02c      	b.n	8001860 <HAL_DMA_IRQHandler+0x2a0>
 8001806:	bf00      	nop
 8001808:	200186a4 	.word	0x200186a4
 800180c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d023      	beq.n	8001860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	4798      	blx	r3
 8001820:	e01e      	b.n	8001860 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10f      	bne.n	8001850 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0210 	bic.w	r2, r2, #16
 800183e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001864:	2b00      	cmp	r3, #0
 8001866:	d032      	beq.n	80018ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d022      	beq.n	80018ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2205      	movs	r2, #5
 8001878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0201 	bic.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3301      	adds	r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	d307      	bcc.n	80018a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f2      	bne.n	800188c <HAL_DMA_IRQHandler+0x2cc>
 80018a6:	e000      	b.n	80018aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
 80018ca:	e000      	b.n	80018ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80018cc:	bf00      	nop
    }
  }
}
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b40      	cmp	r3, #64	; 0x40
 8001900:	d108      	bne.n	8001914 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001912:	e007      	b.n	8001924 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	60da      	str	r2, [r3, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	3b10      	subs	r3, #16
 8001940:	4a14      	ldr	r2, [pc, #80]	; (8001994 <DMA_CalcBaseAndBitshift+0x64>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800194a:	4a13      	ldr	r2, [pc, #76]	; (8001998 <DMA_CalcBaseAndBitshift+0x68>)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d909      	bls.n	8001972 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001966:	f023 0303 	bic.w	r3, r3, #3
 800196a:	1d1a      	adds	r2, r3, #4
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	659a      	str	r2, [r3, #88]	; 0x58
 8001970:	e007      	b.n	8001982 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	aaaaaaab 	.word	0xaaaaaaab
 8001998:	080045d0 	.word	0x080045d0

0800199c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d11f      	bne.n	80019f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d856      	bhi.n	8001a6a <DMA_CheckFifoParam+0xce>
 80019bc:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <DMA_CheckFifoParam+0x28>)
 80019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019e7 	.word	0x080019e7
 80019cc:	080019d5 	.word	0x080019d5
 80019d0:	08001a6b 	.word	0x08001a6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d046      	beq.n	8001a6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e4:	e043      	b.n	8001a6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019ee:	d140      	bne.n	8001a72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f4:	e03d      	b.n	8001a72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fe:	d121      	bne.n	8001a44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d837      	bhi.n	8001a76 <DMA_CheckFifoParam+0xda>
 8001a06:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <DMA_CheckFifoParam+0x70>)
 8001a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0c:	08001a1d 	.word	0x08001a1d
 8001a10:	08001a23 	.word	0x08001a23
 8001a14:	08001a1d 	.word	0x08001a1d
 8001a18:	08001a35 	.word	0x08001a35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a20:	e030      	b.n	8001a84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d025      	beq.n	8001a7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a32:	e022      	b.n	8001a7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a3c:	d11f      	bne.n	8001a7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a42:	e01c      	b.n	8001a7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d903      	bls.n	8001a52 <DMA_CheckFifoParam+0xb6>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d003      	beq.n	8001a58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a50:	e018      	b.n	8001a84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
      break;
 8001a56:	e015      	b.n	8001a84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00e      	beq.n	8001a82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
      break;
 8001a68:	e00b      	b.n	8001a82 <DMA_CheckFifoParam+0xe6>
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e00a      	b.n	8001a84 <DMA_CheckFifoParam+0xe8>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e008      	b.n	8001a84 <DMA_CheckFifoParam+0xe8>
      break;
 8001a72:	bf00      	nop
 8001a74:	e006      	b.n	8001a84 <DMA_CheckFifoParam+0xe8>
      break;
 8001a76:	bf00      	nop
 8001a78:	e004      	b.n	8001a84 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e002      	b.n	8001a84 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a7e:	bf00      	nop
 8001a80:	e000      	b.n	8001a84 <DMA_CheckFifoParam+0xe8>
      break;
 8001a82:	bf00      	nop
    }
  } 
  
  return status; 
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e159      	b.n	8001d64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 8148 	bne.w	8001d5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d005      	beq.n	8001ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d130      	bne.n	8001b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d017      	beq.n	8001b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a2 	beq.w	8001d5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a56      	ldr	r2, [pc, #344]	; (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b54      	ldr	r3, [pc, #336]	; (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c36:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_GPIO_Init+0x2ec>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_GPIO_Init+0x2f0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x202>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x2f4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x1fe>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <HAL_GPIO_Init+0x2f8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x1fa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a46      	ldr	r2, [pc, #280]	; (8001d90 <HAL_GPIO_Init+0x2fc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x1f6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <HAL_GPIO_Init+0x300>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x1f2>
 8001c82:	2304      	movs	r3, #4
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x2ec>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a2f      	ldr	r2, [pc, #188]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f aea2 	bls.w	8001ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	e001      	b.n	8001dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ddc:	787b      	ldrb	r3, [r7, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de8:	e003      	b.n	8001df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	041a      	lsls	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	619a      	str	r2, [r3, #24]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e267      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d075      	beq.n	8001f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e1e:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d00c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2a:	4b85      	ldr	r3, [pc, #532]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d112      	bne.n	8001e5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4b82      	ldr	r3, [pc, #520]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	4b7e      	ldr	r3, [pc, #504]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d05b      	beq.n	8001f08 <HAL_RCC_OscConfig+0x108>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d157      	bne.n	8001f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e242      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d106      	bne.n	8001e74 <HAL_RCC_OscConfig+0x74>
 8001e66:	4b76      	ldr	r3, [pc, #472]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a75      	ldr	r2, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xb0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x98>
 8001e7e:	4b70      	ldr	r3, [pc, #448]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6f      	ldr	r2, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b6d      	ldr	r3, [pc, #436]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6c      	ldr	r2, [pc, #432]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xb0>
 8001e98:	4b69      	ldr	r3, [pc, #420]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a68      	ldr	r2, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b66      	ldr	r3, [pc, #408]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a65      	ldr	r2, [pc, #404]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f93a 	bl	8001130 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f936 	bl	8001130 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e207      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xc0>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f926 	bl	8001130 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f922 	bl	8001130 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1f3      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b51      	ldr	r3, [pc, #324]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xe8>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d063      	beq.n	8001fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f16:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b44      	ldr	r3, [pc, #272]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x152>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1c7      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4937      	ldr	r1, [pc, #220]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e03a      	b.n	8001fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_RCC_OscConfig+0x244>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff f8db 	bl	8001130 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff f8d7 	bl	8001130 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1a8      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4925      	ldr	r1, [pc, #148]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	e015      	b.n	8001fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x244>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f8ba 	bl	8001130 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f8b6 	bl	8001130 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e187      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d036      	beq.n	8002058 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d016      	beq.n	8002020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_RCC_OscConfig+0x248>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f89a 	bl	8001130 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff f896 	bl	8001130 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e167      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8002014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x200>
 800201e:	e01b      	b.n	8002058 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_OscConfig+0x248>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff f883 	bl	8001130 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	e00e      	b.n	800204c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202e:	f7ff f87f 	bl	8001130 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d907      	bls.n	800204c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e150      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
 8002040:	40023800 	.word	0x40023800
 8002044:	42470000 	.word	0x42470000
 8002048:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b88      	ldr	r3, [pc, #544]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ea      	bne.n	800202e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8097 	beq.w	8002194 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b81      	ldr	r3, [pc, #516]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b7d      	ldr	r3, [pc, #500]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a7c      	ldr	r2, [pc, #496]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	4b77      	ldr	r3, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d118      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a2:	4b74      	ldr	r3, [pc, #464]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a73      	ldr	r2, [pc, #460]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ae:	f7ff f83f 	bl	8001130 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7ff f83b 	bl	8001130 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e10c      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x2ea>
 80020dc:	4b64      	ldr	r3, [pc, #400]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
 80020e8:	e01c      	b.n	8002124 <HAL_RCC_OscConfig+0x324>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x30c>
 80020f2:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a5e      	ldr	r2, [pc, #376]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a5b      	ldr	r2, [pc, #364]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0x324>
 800210c:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a57      	ldr	r2, [pc, #348]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	4b55      	ldr	r3, [pc, #340]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a54      	ldr	r2, [pc, #336]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800211e:	f023 0304 	bic.w	r3, r3, #4
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7ff f800 	bl	8001130 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002132:	e00a      	b.n	800214a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7fe fffc 	bl	8001130 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e0cb      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214a:	4b49      	ldr	r3, [pc, #292]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ee      	beq.n	8002134 <HAL_RCC_OscConfig+0x334>
 8002156:	e014      	b.n	8002182 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7fe ffea 	bl	8001130 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe ffe6 	bl	8001130 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0b5      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002176:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ee      	bne.n	8002160 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a38      	ldr	r2, [pc, #224]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a1 	beq.w	80022e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d05c      	beq.n	8002264 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d141      	bne.n	8002236 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_OscConfig+0x478>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe ffba 	bl	8001130 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c0:	f7fe ffb6 	bl	8001130 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e087      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	019b      	lsls	r3, r3, #6
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	3b01      	subs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	491b      	ldr	r1, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x478>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7fe ff8f 	bl	8001130 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7fe ff8b 	bl	8001130 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e05c      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x416>
 8002234:	e054      	b.n	80022e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCC_OscConfig+0x478>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe ff78 	bl	8001130 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe ff74 	bl	8001130 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e045      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x444>
 8002262:	e03d      	b.n	80022e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e038      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000
 8002278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x4ec>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d028      	beq.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d121      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11a      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d111      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	3b01      	subs	r3, #1
 80022c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0cc      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d90c      	bls.n	800232c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b8      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d044      	beq.n	8002410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d119      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e067      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fea6 	bl	8001130 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7fe fea2 	bl	8001130 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e04f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d20c      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e032      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4916      	ldr	r1, [pc, #88]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002476:	f000 f821 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fe06 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	080045b8 	.word	0x080045b8
 80024b4:	200186a4 	.word	0x200186a4
 80024b8:	200186a8 	.word	0x200186a8

080024bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c0:	b090      	sub	sp, #64	; 0x40
 80024c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
 80024c8:	2300      	movs	r3, #0
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024cc:	2300      	movs	r3, #0
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d00d      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x40>
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	f200 80a1 	bhi.w	8002628 <HAL_RCC_GetSysClockFreq+0x16c>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x34>
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ee:	e09b      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_GetSysClockFreq+0x184>)
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80024f4:	e09b      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f6:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCC_GetSysClockFreq+0x188>)
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024fa:	e098      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002506:	4b4d      	ldr	r3, [pc, #308]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d028      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002512:	4b4a      	ldr	r3, [pc, #296]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	2200      	movs	r2, #0
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	627a      	str	r2, [r7, #36]	; 0x24
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002524:	2100      	movs	r1, #0
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCC_GetSysClockFreq+0x188>)
 8002528:	fb03 f201 	mul.w	r2, r3, r1
 800252c:	2300      	movs	r3, #0
 800252e:	fb00 f303 	mul.w	r3, r0, r3
 8002532:	4413      	add	r3, r2
 8002534:	4a43      	ldr	r2, [pc, #268]	; (8002644 <HAL_RCC_GetSysClockFreq+0x188>)
 8002536:	fba0 1202 	umull	r1, r2, r0, r2
 800253a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800253c:	460a      	mov	r2, r1
 800253e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002542:	4413      	add	r3, r2
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002548:	2200      	movs	r2, #0
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	61fa      	str	r2, [r7, #28]
 800254e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002552:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002556:	f7fd fe93 	bl	8000280 <__aeabi_uldivmod>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4613      	mov	r3, r2
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002562:	e053      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	2200      	movs	r2, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	617a      	str	r2, [r7, #20]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002576:	f04f 0b00 	mov.w	fp, #0
 800257a:	4652      	mov	r2, sl
 800257c:	465b      	mov	r3, fp
 800257e:	f04f 0000 	mov.w	r0, #0
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	0159      	lsls	r1, r3, #5
 8002588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800258c:	0150      	lsls	r0, r2, #5
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	ebb2 080a 	subs.w	r8, r2, sl
 8002596:	eb63 090b 	sbc.w	r9, r3, fp
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025ae:	ebb2 0408 	subs.w	r4, r2, r8
 80025b2:	eb63 0509 	sbc.w	r5, r3, r9
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	00eb      	lsls	r3, r5, #3
 80025c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c4:	00e2      	lsls	r2, r4, #3
 80025c6:	4614      	mov	r4, r2
 80025c8:	461d      	mov	r5, r3
 80025ca:	eb14 030a 	adds.w	r3, r4, sl
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	eb45 030b 	adc.w	r3, r5, fp
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e2:	4629      	mov	r1, r5
 80025e4:	028b      	lsls	r3, r1, #10
 80025e6:	4621      	mov	r1, r4
 80025e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ec:	4621      	mov	r1, r4
 80025ee:	028a      	lsls	r2, r1, #10
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	2200      	movs	r2, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	60fa      	str	r2, [r7, #12]
 80025fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002600:	f7fd fe3e 	bl	8000280 <__aeabi_uldivmod>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4613      	mov	r3, r2
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	3301      	adds	r3, #1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800261c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002626:	e002      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetSysClockFreq+0x184>)
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800262c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002630:	4618      	mov	r0, r3
 8002632:	3740      	adds	r7, #64	; 0x40
 8002634:	46bd      	mov	sp, r7
 8002636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	00f42400 	.word	0x00f42400
 8002644:	017d7840 	.word	0x017d7840

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCC_GetHCLKFreq+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	200186a4 	.word	0x200186a4

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002664:	f7ff fff0 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0a9b      	lsrs	r3, r3, #10
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	080045c8 	.word	0x080045c8

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800268c:	f7ff ffdc 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0b5b      	lsrs	r3, r3, #13
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	080045c8 	.word	0x080045c8

080026b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07b      	b.n	80027ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d108      	bne.n	80026dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026d2:	d009      	beq.n	80026e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
 80026da:	e005      	b.n	80026e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe faf2 	bl	8000cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	ea42 0103 	orr.w	r1, r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	f003 0104 	and.w	r1, r3, #4
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	f003 0210 	and.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b088      	sub	sp, #32
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_SPI_Transmit+0x22>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e12d      	b.n	8002a40 <HAL_SPI_Transmit+0x27e>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ec:	f7fe fca0 	bl	8001130 <HAL_GetTick>
 80027f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d002      	beq.n	8002808 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002802:	2302      	movs	r3, #2
 8002804:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002806:	e116      	b.n	8002a36 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_SPI_Transmit+0x52>
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002818:	e10d      	b.n	8002a36 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2203      	movs	r2, #3
 800281e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	88fa      	ldrh	r2, [r7, #6]
 8002838:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002860:	d10f      	bne.n	8002882 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002870:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002880:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d007      	beq.n	80028a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a8:	d14f      	bne.n	800294a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_SPI_Transmit+0xf6>
 80028b2:	8afb      	ldrh	r3, [r7, #22]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d142      	bne.n	800293e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	881a      	ldrh	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	1c9a      	adds	r2, r3, #2
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028dc:	e02f      	b.n	800293e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d112      	bne.n	8002912 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	881a      	ldrh	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	1c9a      	adds	r2, r3, #2
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002910:	e015      	b.n	800293e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002912:	f7fe fc0d 	bl	8001130 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d803      	bhi.n	800292a <HAL_SPI_Transmit+0x168>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d102      	bne.n	8002930 <HAL_SPI_Transmit+0x16e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d106      	bne.n	800293e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800293c:	e07b      	b.n	8002a36 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ca      	bne.n	80028de <HAL_SPI_Transmit+0x11c>
 8002948:	e050      	b.n	80029ec <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_SPI_Transmit+0x196>
 8002952:	8afb      	ldrh	r3, [r7, #22]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d144      	bne.n	80029e2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	7812      	ldrb	r2, [r2, #0]
 8002964:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800297e:	e030      	b.n	80029e2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d113      	bne.n	80029b6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80029b4:	e015      	b.n	80029e2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029b6:	f7fe fbbb 	bl	8001130 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d803      	bhi.n	80029ce <HAL_SPI_Transmit+0x20c>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d102      	bne.n	80029d4 <HAL_SPI_Transmit+0x212>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80029e0:	e029      	b.n	8002a36 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1c9      	bne.n	8002980 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	6839      	ldr	r1, [r7, #0]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fa61 	bl	8002eb8 <SPI_EndRxTxTransaction>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e003      	b.n	8002a36 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a56:	2301      	movs	r3, #1
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_SPI_TransmitReceive+0x26>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e198      	b.n	8002da0 <HAL_SPI_TransmitReceive+0x358>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a76:	f7fe fb5b 	bl	8001130 <HAL_GetTick>
 8002a7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d00f      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x70>
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9e:	d107      	bne.n	8002ab0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <HAL_SPI_TransmitReceive+0x68>
 8002aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d003      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ab6:	e16d      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_SPI_TransmitReceive+0x82>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_SPI_TransmitReceive+0x82>
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ad0:	e160      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d003      	beq.n	8002ae6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2205      	movs	r2, #5
 8002ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	887a      	ldrh	r2, [r7, #2]
 8002b0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d007      	beq.n	8002b3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b42:	d17c      	bne.n	8002c3e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_SPI_TransmitReceive+0x10a>
 8002b4c:	8b7b      	ldrh	r3, [r7, #26]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d16a      	bne.n	8002c28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	1c9a      	adds	r2, r3, #2
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b76:	e057      	b.n	8002c28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d11b      	bne.n	8002bbe <HAL_SPI_TransmitReceive+0x176>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d016      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0x176>
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d113      	bne.n	8002bbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d119      	bne.n	8002c00 <HAL_SPI_TransmitReceive+0x1b8>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d014      	beq.n	8002c00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	b292      	uxth	r2, r2
 8002be2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	1c9a      	adds	r2, r3, #2
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c00:	f7fe fa96 	bl	8001130 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d80b      	bhi.n	8002c28 <HAL_SPI_TransmitReceive+0x1e0>
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d007      	beq.n	8002c28 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002c26:	e0b5      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1a2      	bne.n	8002b78 <HAL_SPI_TransmitReceive+0x130>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d19d      	bne.n	8002b78 <HAL_SPI_TransmitReceive+0x130>
 8002c3c:	e080      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_SPI_TransmitReceive+0x204>
 8002c46:	8b7b      	ldrh	r3, [r7, #26]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d16f      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	7812      	ldrb	r2, [r2, #0]
 8002c58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c72:	e05b      	b.n	8002d2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d11c      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x274>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d017      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x274>
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d114      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d119      	bne.n	8002cfe <HAL_SPI_TransmitReceive+0x2b6>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d014      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cfe:	f7fe fa17 	bl	8001130 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d803      	bhi.n	8002d16 <HAL_SPI_TransmitReceive+0x2ce>
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d102      	bne.n	8002d1c <HAL_SPI_TransmitReceive+0x2d4>
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002d2a:	e033      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d19e      	bne.n	8002c74 <HAL_SPI_TransmitReceive+0x22c>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d199      	bne.n	8002c74 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f8b7 	bl	8002eb8 <SPI_EndRxTxTransaction>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d5c:	e01a      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d8a:	e003      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3730      	adds	r7, #48	; 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002db8:	f7fe f9ba 	bl	8001130 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dc8:	f7fe f9b2 	bl	8001130 <HAL_GetTick>
 8002dcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	015b      	lsls	r3, r3, #5
 8002dd4:	0d1b      	lsrs	r3, r3, #20
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dde:	e054      	b.n	8002e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de6:	d050      	beq.n	8002e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002de8:	f7fe f9a2 	bl	8001130 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d902      	bls.n	8002dfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d13d      	bne.n	8002e7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e16:	d111      	bne.n	8002e3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e20:	d004      	beq.n	8002e2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2a:	d107      	bne.n	8002e3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e44:	d10f      	bne.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e017      	b.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d19b      	bne.n	8002de0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200186a4 	.word	0x200186a4

08002eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2102      	movs	r1, #2
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff ff6a 	bl	8002da8 <SPI_WaitFlagStateUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e032      	b.n	8002f50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <SPI_EndRxTxTransaction+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <SPI_EndRxTxTransaction+0xa4>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	0d5b      	lsrs	r3, r3, #21
 8002ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f08:	d112      	bne.n	8002f30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff ff47 	bl	8002da8 <SPI_WaitFlagStateUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d016      	beq.n	8002f4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e00f      	b.n	8002f50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b80      	cmp	r3, #128	; 0x80
 8002f48:	d0f2      	beq.n	8002f30 <SPI_EndRxTxTransaction+0x78>
 8002f4a:	e000      	b.n	8002f4e <SPI_EndRxTxTransaction+0x96>
        break;
 8002f4c:	bf00      	nop
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200186a4 	.word	0x200186a4
 8002f5c:	165e9f81 	.word	0x165e9f81

08002f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e042      	b.n	8002ff8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd ffc6 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fb79 	bl	800369c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b20      	cmp	r3, #32
 800301e:	d175      	bne.n	800310c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_UART_Transmit+0x2c>
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e06e      	b.n	800310e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2221      	movs	r2, #33	; 0x21
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800303e:	f7fe f877 	bl	8001130 <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	88fa      	ldrh	r2, [r7, #6]
 800304e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003058:	d108      	bne.n	800306c <HAL_UART_Transmit+0x6c>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e003      	b.n	8003074 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003074:	e02e      	b.n	80030d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2200      	movs	r2, #0
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f98b 	bl	800339c <UART_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e03a      	b.n	800310e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10b      	bne.n	80030b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	3302      	adds	r3, #2
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e007      	b.n	80030c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	3301      	adds	r3, #1
 80030c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1cb      	bne.n	8003076 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2140      	movs	r1, #64	; 0x40
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f957 	bl	800339c <UART_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e006      	b.n	800310e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	4613      	mov	r3, r2
 8003122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b20      	cmp	r3, #32
 800312e:	d112      	bne.n	8003156 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_UART_Receive_DMA+0x26>
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e00b      	b.n	8003158 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	461a      	mov	r2, r3
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f97f 	bl	8003450 <UART_Start_Receive_DMA>
 8003152:	4603      	mov	r3, r0
 8003154:	e000      	b.n	8003158 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b09c      	sub	sp, #112	; 0x70
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d172      	bne.n	80032a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80031bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031be:	2200      	movs	r2, #0
 80031c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	330c      	adds	r3, #12
 80031c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80031da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	330c      	adds	r3, #12
 80031e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80031e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e5      	bne.n	80031c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3314      	adds	r3, #20
 80031fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	667b      	str	r3, [r7, #100]	; 0x64
 800320e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3314      	adds	r3, #20
 8003214:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003216:	647a      	str	r2, [r7, #68]	; 0x44
 8003218:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800321c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1e5      	bne.n	80031f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3314      	adds	r3, #20
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	623b      	str	r3, [r7, #32]
   return(result);
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003240:	663b      	str	r3, [r7, #96]	; 0x60
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3314      	adds	r3, #20
 8003248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800324a:	633a      	str	r2, [r7, #48]	; 0x30
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e5      	bne.n	800322a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	2220      	movs	r2, #32
 8003262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	2b01      	cmp	r3, #1
 800326c:	d119      	bne.n	80032a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800326e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	60fb      	str	r3, [r7, #12]
   return(result);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f023 0310 	bic.w	r3, r3, #16
 8003284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800328e:	61fa      	str	r2, [r7, #28]
 8003290:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	69b9      	ldr	r1, [r7, #24]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	617b      	str	r3, [r7, #20]
   return(result);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e5      	bne.n	800326e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	2200      	movs	r2, #0
 80032a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d106      	bne.n	80032be <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032b4:	4619      	mov	r1, r3
 80032b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032b8:	f7ff ff66 	bl	8003188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032bc:	e002      	b.n	80032c4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80032be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032c0:	f7ff ff4e 	bl	8003160 <HAL_UART_RxCpltCallback>
}
 80032c4:	bf00      	nop
 80032c6:	3770      	adds	r7, #112	; 0x70
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4619      	mov	r1, r3
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff ff48 	bl	8003188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032f8:	e002      	b.n	8003300 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7fd f9ac 	bl	8000658 <HAL_UART_RxHalfCpltCallback>
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b21      	cmp	r3, #33	; 0x21
 800333a:	d108      	bne.n	800334e <UART_DMAError+0x46>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003348:	68b8      	ldr	r0, [r7, #8]
 800334a:	f000 f91b 	bl	8003584 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b22      	cmp	r3, #34	; 0x22
 800336e:	d108      	bne.n	8003382 <UART_DMAError+0x7a>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2200      	movs	r2, #0
 800337a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f000 f929 	bl	80035d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f043 0210 	orr.w	r2, r3, #16
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800338e:	68b8      	ldr	r0, [r7, #8]
 8003390:	f7ff fef0 	bl	8003174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ac:	e03b      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d037      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7fd febb 	bl	8001130 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <UART_WaitOnFlagUntilTimeout+0x30>
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e03a      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d023      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b80      	cmp	r3, #128	; 0x80
 80033e2:	d020      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d01d      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d116      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f8e0 	bl	80035d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2208      	movs	r2, #8
 8003418:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e00f      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	429a      	cmp	r2, r3
 8003442:	d0b4      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b098      	sub	sp, #96	; 0x60
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2222      	movs	r2, #34	; 0x22
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347c:	4a3e      	ldr	r2, [pc, #248]	; (8003578 <UART_Start_Receive_DMA+0x128>)
 800347e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003484:	4a3d      	ldr	r2, [pc, #244]	; (800357c <UART_Start_Receive_DMA+0x12c>)
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <UART_Start_Receive_DMA+0x130>)
 800348e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2200      	movs	r2, #0
 8003496:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003498:	f107 0308 	add.w	r3, r7, #8
 800349c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	f7fe f82e 	bl	8001510 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d019      	beq.n	8003506 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80034f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e5      	bne.n	80034d2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3314      	adds	r3, #20
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	657b      	str	r3, [r7, #84]	; 0x54
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3314      	adds	r3, #20
 8003524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003526:	63ba      	str	r2, [r7, #56]	; 0x38
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800352c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e5      	bne.n	8003506 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	617b      	str	r3, [r7, #20]
   return(result);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003550:	653b      	str	r3, [r7, #80]	; 0x50
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3314      	adds	r3, #20
 8003558:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800355a:	627a      	str	r2, [r7, #36]	; 0x24
 800355c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6a39      	ldr	r1, [r7, #32]
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	61fb      	str	r3, [r7, #28]
   return(result);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e5      	bne.n	800353a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3760      	adds	r7, #96	; 0x60
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	080031a1 	.word	0x080031a1
 800357c:	080032cd 	.word	0x080032cd
 8003580:	08003309 	.word	0x08003309

08003584 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	330c      	adds	r3, #12
 8003592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	60bb      	str	r3, [r7, #8]
   return(result);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	61ba      	str	r2, [r7, #24]
 80035ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6979      	ldr	r1, [r7, #20]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	613b      	str	r3, [r7, #16]
   return(result);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e5      	bne.n	800358c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80035c8:	bf00      	nop
 80035ca:	3724      	adds	r7, #36	; 0x24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b095      	sub	sp, #84	; 0x54
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035fc:	643a      	str	r2, [r7, #64]	; 0x40
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e5      	bne.n	80035dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3314      	adds	r3, #20
 8003616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	64bb      	str	r3, [r7, #72]	; 0x48
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003630:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	2b01      	cmp	r3, #1
 800364a:	d119      	bne.n	8003680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	60bb      	str	r3, [r7, #8]
   return(result);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f023 0310 	bic.w	r3, r3, #16
 8003662:	647b      	str	r3, [r7, #68]	; 0x44
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800366c:	61ba      	str	r2, [r7, #24]
 800366e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6979      	ldr	r1, [r7, #20]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	613b      	str	r3, [r7, #16]
   return(result);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800368e:	bf00      	nop
 8003690:	3754      	adds	r7, #84	; 0x54
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800369c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a0:	b0c0      	sub	sp, #256	; 0x100
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	68d9      	ldr	r1, [r3, #12]
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	ea40 0301 	orr.w	r3, r0, r1
 80036c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	431a      	orrs	r2, r3
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036f4:	f021 010c 	bic.w	r1, r1, #12
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003702:	430b      	orrs	r3, r1
 8003704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	6999      	ldr	r1, [r3, #24]
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	ea40 0301 	orr.w	r3, r0, r1
 8003722:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b8f      	ldr	r3, [pc, #572]	; (8003968 <UART_SetConfig+0x2cc>)
 800372c:	429a      	cmp	r2, r3
 800372e:	d005      	beq.n	800373c <UART_SetConfig+0xa0>
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b8d      	ldr	r3, [pc, #564]	; (800396c <UART_SetConfig+0x2d0>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d104      	bne.n	8003746 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800373c:	f7fe ffa4 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8003740:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003744:	e003      	b.n	800374e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003746:	f7fe ff8b 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 800374a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003758:	f040 810c 	bne.w	8003974 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800375c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003760:	2200      	movs	r2, #0
 8003762:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003766:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800376a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800376e:	4622      	mov	r2, r4
 8003770:	462b      	mov	r3, r5
 8003772:	1891      	adds	r1, r2, r2
 8003774:	65b9      	str	r1, [r7, #88]	; 0x58
 8003776:	415b      	adcs	r3, r3
 8003778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800377a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800377e:	4621      	mov	r1, r4
 8003780:	eb12 0801 	adds.w	r8, r2, r1
 8003784:	4629      	mov	r1, r5
 8003786:	eb43 0901 	adc.w	r9, r3, r1
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800379a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800379e:	4690      	mov	r8, r2
 80037a0:	4699      	mov	r9, r3
 80037a2:	4623      	mov	r3, r4
 80037a4:	eb18 0303 	adds.w	r3, r8, r3
 80037a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037ac:	462b      	mov	r3, r5
 80037ae:	eb49 0303 	adc.w	r3, r9, r3
 80037b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037ca:	460b      	mov	r3, r1
 80037cc:	18db      	adds	r3, r3, r3
 80037ce:	653b      	str	r3, [r7, #80]	; 0x50
 80037d0:	4613      	mov	r3, r2
 80037d2:	eb42 0303 	adc.w	r3, r2, r3
 80037d6:	657b      	str	r3, [r7, #84]	; 0x54
 80037d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037e0:	f7fc fd4e 	bl	8000280 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <UART_SetConfig+0x2d4>)
 80037ea:	fba3 2302 	umull	r2, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	011c      	lsls	r4, r3, #4
 80037f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003800:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003804:	4642      	mov	r2, r8
 8003806:	464b      	mov	r3, r9
 8003808:	1891      	adds	r1, r2, r2
 800380a:	64b9      	str	r1, [r7, #72]	; 0x48
 800380c:	415b      	adcs	r3, r3
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003814:	4641      	mov	r1, r8
 8003816:	eb12 0a01 	adds.w	sl, r2, r1
 800381a:	4649      	mov	r1, r9
 800381c:	eb43 0b01 	adc.w	fp, r3, r1
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800382c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003834:	4692      	mov	sl, r2
 8003836:	469b      	mov	fp, r3
 8003838:	4643      	mov	r3, r8
 800383a:	eb1a 0303 	adds.w	r3, sl, r3
 800383e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003842:	464b      	mov	r3, r9
 8003844:	eb4b 0303 	adc.w	r3, fp, r3
 8003848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003858:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800385c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003860:	460b      	mov	r3, r1
 8003862:	18db      	adds	r3, r3, r3
 8003864:	643b      	str	r3, [r7, #64]	; 0x40
 8003866:	4613      	mov	r3, r2
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	647b      	str	r3, [r7, #68]	; 0x44
 800386e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003876:	f7fc fd03 	bl	8000280 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4611      	mov	r1, r2
 8003880:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <UART_SetConfig+0x2d4>)
 8003882:	fba3 2301 	umull	r2, r3, r3, r1
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2264      	movs	r2, #100	; 0x64
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	1acb      	subs	r3, r1, r3
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <UART_SetConfig+0x2d4>)
 8003898:	fba3 2302 	umull	r2, r3, r3, r2
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038a4:	441c      	add	r4, r3
 80038a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038aa:	2200      	movs	r2, #0
 80038ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038b8:	4642      	mov	r2, r8
 80038ba:	464b      	mov	r3, r9
 80038bc:	1891      	adds	r1, r2, r2
 80038be:	63b9      	str	r1, [r7, #56]	; 0x38
 80038c0:	415b      	adcs	r3, r3
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038c8:	4641      	mov	r1, r8
 80038ca:	1851      	adds	r1, r2, r1
 80038cc:	6339      	str	r1, [r7, #48]	; 0x30
 80038ce:	4649      	mov	r1, r9
 80038d0:	414b      	adcs	r3, r1
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038e0:	4659      	mov	r1, fp
 80038e2:	00cb      	lsls	r3, r1, #3
 80038e4:	4651      	mov	r1, sl
 80038e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ea:	4651      	mov	r1, sl
 80038ec:	00ca      	lsls	r2, r1, #3
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	4642      	mov	r2, r8
 80038f6:	189b      	adds	r3, r3, r2
 80038f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038fc:	464b      	mov	r3, r9
 80038fe:	460a      	mov	r2, r1
 8003900:	eb42 0303 	adc.w	r3, r2, r3
 8003904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003914:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800391c:	460b      	mov	r3, r1
 800391e:	18db      	adds	r3, r3, r3
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
 8003922:	4613      	mov	r3, r2
 8003924:	eb42 0303 	adc.w	r3, r2, r3
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800392a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800392e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003932:	f7fc fca5 	bl	8000280 <__aeabi_uldivmod>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <UART_SetConfig+0x2d4>)
 800393c:	fba3 1302 	umull	r1, r3, r3, r2
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	2164      	movs	r1, #100	; 0x64
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	3332      	adds	r3, #50	; 0x32
 800394e:	4a08      	ldr	r2, [pc, #32]	; (8003970 <UART_SetConfig+0x2d4>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	f003 0207 	and.w	r2, r3, #7
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4422      	add	r2, r4
 8003962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003964:	e106      	b.n	8003b74 <UART_SetConfig+0x4d8>
 8003966:	bf00      	nop
 8003968:	40011000 	.word	0x40011000
 800396c:	40011400 	.word	0x40011400
 8003970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800397e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003986:	4642      	mov	r2, r8
 8003988:	464b      	mov	r3, r9
 800398a:	1891      	adds	r1, r2, r2
 800398c:	6239      	str	r1, [r7, #32]
 800398e:	415b      	adcs	r3, r3
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003996:	4641      	mov	r1, r8
 8003998:	1854      	adds	r4, r2, r1
 800399a:	4649      	mov	r1, r9
 800399c:	eb43 0501 	adc.w	r5, r3, r1
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	00eb      	lsls	r3, r5, #3
 80039aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ae:	00e2      	lsls	r2, r4, #3
 80039b0:	4614      	mov	r4, r2
 80039b2:	461d      	mov	r5, r3
 80039b4:	4643      	mov	r3, r8
 80039b6:	18e3      	adds	r3, r4, r3
 80039b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039bc:	464b      	mov	r3, r9
 80039be:	eb45 0303 	adc.w	r3, r5, r3
 80039c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039e2:	4629      	mov	r1, r5
 80039e4:	008b      	lsls	r3, r1, #2
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ec:	4621      	mov	r1, r4
 80039ee:	008a      	lsls	r2, r1, #2
 80039f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039f4:	f7fc fc44 	bl	8000280 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4b60      	ldr	r3, [pc, #384]	; (8003b80 <UART_SetConfig+0x4e4>)
 80039fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	011c      	lsls	r4, r3, #4
 8003a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a18:	4642      	mov	r2, r8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	1891      	adds	r1, r2, r2
 8003a1e:	61b9      	str	r1, [r7, #24]
 8003a20:	415b      	adcs	r3, r3
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a28:	4641      	mov	r1, r8
 8003a2a:	1851      	adds	r1, r2, r1
 8003a2c:	6139      	str	r1, [r7, #16]
 8003a2e:	4649      	mov	r1, r9
 8003a30:	414b      	adcs	r3, r1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a40:	4659      	mov	r1, fp
 8003a42:	00cb      	lsls	r3, r1, #3
 8003a44:	4651      	mov	r1, sl
 8003a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a4a:	4651      	mov	r1, sl
 8003a4c:	00ca      	lsls	r2, r1, #3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	4642      	mov	r2, r8
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	460a      	mov	r2, r1
 8003a60:	eb42 0303 	adc.w	r3, r2, r3
 8003a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a80:	4649      	mov	r1, r9
 8003a82:	008b      	lsls	r3, r1, #2
 8003a84:	4641      	mov	r1, r8
 8003a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	008a      	lsls	r2, r1, #2
 8003a8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a92:	f7fc fbf5 	bl	8000280 <__aeabi_uldivmod>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <UART_SetConfig+0x4e4>)
 8003a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2264      	movs	r2, #100	; 0x64
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	1acb      	subs	r3, r1, r3
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	3332      	adds	r3, #50	; 0x32
 8003ab0:	4a33      	ldr	r2, [pc, #204]	; (8003b80 <UART_SetConfig+0x4e4>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003abc:	441c      	add	r4, r3
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ac6:	677a      	str	r2, [r7, #116]	; 0x74
 8003ac8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	1891      	adds	r1, r2, r2
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	415b      	adcs	r3, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003adc:	4641      	mov	r1, r8
 8003ade:	1851      	adds	r1, r2, r1
 8003ae0:	6039      	str	r1, [r7, #0]
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	414b      	adcs	r3, r1
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003af4:	4659      	mov	r1, fp
 8003af6:	00cb      	lsls	r3, r1, #3
 8003af8:	4651      	mov	r1, sl
 8003afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afe:	4651      	mov	r1, sl
 8003b00:	00ca      	lsls	r2, r1, #3
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	4642      	mov	r2, r8
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b0e:	464b      	mov	r3, r9
 8003b10:	460a      	mov	r2, r1
 8003b12:	eb42 0303 	adc.w	r3, r2, r3
 8003b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	663b      	str	r3, [r7, #96]	; 0x60
 8003b22:	667a      	str	r2, [r7, #100]	; 0x64
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b30:	4649      	mov	r1, r9
 8003b32:	008b      	lsls	r3, r1, #2
 8003b34:	4641      	mov	r1, r8
 8003b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	008a      	lsls	r2, r1, #2
 8003b3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b42:	f7fc fb9d 	bl	8000280 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <UART_SetConfig+0x4e4>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	2164      	movs	r1, #100	; 0x64
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	3332      	adds	r3, #50	; 0x32
 8003b5e:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <UART_SetConfig+0x4e4>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 020f 	and.w	r2, r3, #15
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4422      	add	r2, r4
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	bf00      	nop
 8003b76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b80:	51eb851f 	.word	0x51eb851f

08003b84 <_vsniprintf_r>:
 8003b84:	b530      	push	{r4, r5, lr}
 8003b86:	4614      	mov	r4, r2
 8003b88:	2c00      	cmp	r4, #0
 8003b8a:	b09b      	sub	sp, #108	; 0x6c
 8003b8c:	4605      	mov	r5, r0
 8003b8e:	461a      	mov	r2, r3
 8003b90:	da05      	bge.n	8003b9e <_vsniprintf_r+0x1a>
 8003b92:	238b      	movs	r3, #139	; 0x8b
 8003b94:	6003      	str	r3, [r0, #0]
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	b01b      	add	sp, #108	; 0x6c
 8003b9c:	bd30      	pop	{r4, r5, pc}
 8003b9e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003ba2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003ba6:	bf14      	ite	ne
 8003ba8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003bac:	4623      	moveq	r3, r4
 8003bae:	9302      	str	r3, [sp, #8]
 8003bb0:	9305      	str	r3, [sp, #20]
 8003bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb6:	9100      	str	r1, [sp, #0]
 8003bb8:	9104      	str	r1, [sp, #16]
 8003bba:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003bbe:	4669      	mov	r1, sp
 8003bc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bc2:	f000 f99f 	bl	8003f04 <_svfiprintf_r>
 8003bc6:	1c43      	adds	r3, r0, #1
 8003bc8:	bfbc      	itt	lt
 8003bca:	238b      	movlt	r3, #139	; 0x8b
 8003bcc:	602b      	strlt	r3, [r5, #0]
 8003bce:	2c00      	cmp	r4, #0
 8003bd0:	d0e3      	beq.n	8003b9a <_vsniprintf_r+0x16>
 8003bd2:	9b00      	ldr	r3, [sp, #0]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	e7df      	b.n	8003b9a <_vsniprintf_r+0x16>
	...

08003bdc <vsniprintf>:
 8003bdc:	b507      	push	{r0, r1, r2, lr}
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	460a      	mov	r2, r1
 8003be4:	4601      	mov	r1, r0
 8003be6:	4803      	ldr	r0, [pc, #12]	; (8003bf4 <vsniprintf+0x18>)
 8003be8:	6800      	ldr	r0, [r0, #0]
 8003bea:	f7ff ffcb 	bl	8003b84 <_vsniprintf_r>
 8003bee:	b003      	add	sp, #12
 8003bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bf4:	200186fc 	.word	0x200186fc

08003bf8 <memset>:
 8003bf8:	4402      	add	r2, r0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d100      	bne.n	8003c02 <memset+0xa>
 8003c00:	4770      	bx	lr
 8003c02:	f803 1b01 	strb.w	r1, [r3], #1
 8003c06:	e7f9      	b.n	8003bfc <memset+0x4>

08003c08 <__errno>:
 8003c08:	4b01      	ldr	r3, [pc, #4]	; (8003c10 <__errno+0x8>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	200186fc 	.word	0x200186fc

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	4d0d      	ldr	r5, [pc, #52]	; (8003c4c <__libc_init_array+0x38>)
 8003c18:	4c0d      	ldr	r4, [pc, #52]	; (8003c50 <__libc_init_array+0x3c>)
 8003c1a:	1b64      	subs	r4, r4, r5
 8003c1c:	10a4      	asrs	r4, r4, #2
 8003c1e:	2600      	movs	r6, #0
 8003c20:	42a6      	cmp	r6, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	4d0b      	ldr	r5, [pc, #44]	; (8003c54 <__libc_init_array+0x40>)
 8003c26:	4c0c      	ldr	r4, [pc, #48]	; (8003c58 <__libc_init_array+0x44>)
 8003c28:	f000 fc6a 	bl	8004500 <_init>
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	2600      	movs	r6, #0
 8003c32:	42a6      	cmp	r6, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3c:	4798      	blx	r3
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c46:	4798      	blx	r3
 8003c48:	3601      	adds	r6, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	08004614 	.word	0x08004614
 8003c50:	08004614 	.word	0x08004614
 8003c54:	08004614 	.word	0x08004614
 8003c58:	08004618 	.word	0x08004618

08003c5c <__retarget_lock_acquire_recursive>:
 8003c5c:	4770      	bx	lr

08003c5e <__retarget_lock_release_recursive>:
 8003c5e:	4770      	bx	lr

08003c60 <_free_r>:
 8003c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c62:	2900      	cmp	r1, #0
 8003c64:	d044      	beq.n	8003cf0 <_free_r+0x90>
 8003c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6a:	9001      	str	r0, [sp, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c72:	bfb8      	it	lt
 8003c74:	18e4      	addlt	r4, r4, r3
 8003c76:	f000 f8df 	bl	8003e38 <__malloc_lock>
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <_free_r+0x94>)
 8003c7c:	9801      	ldr	r0, [sp, #4]
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	b933      	cbnz	r3, 8003c90 <_free_r+0x30>
 8003c82:	6063      	str	r3, [r4, #4]
 8003c84:	6014      	str	r4, [r2, #0]
 8003c86:	b003      	add	sp, #12
 8003c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c8c:	f000 b8da 	b.w	8003e44 <__malloc_unlock>
 8003c90:	42a3      	cmp	r3, r4
 8003c92:	d908      	bls.n	8003ca6 <_free_r+0x46>
 8003c94:	6825      	ldr	r5, [r4, #0]
 8003c96:	1961      	adds	r1, r4, r5
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	bf01      	itttt	eq
 8003c9c:	6819      	ldreq	r1, [r3, #0]
 8003c9e:	685b      	ldreq	r3, [r3, #4]
 8003ca0:	1949      	addeq	r1, r1, r5
 8003ca2:	6021      	streq	r1, [r4, #0]
 8003ca4:	e7ed      	b.n	8003c82 <_free_r+0x22>
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	b10b      	cbz	r3, 8003cb0 <_free_r+0x50>
 8003cac:	42a3      	cmp	r3, r4
 8003cae:	d9fa      	bls.n	8003ca6 <_free_r+0x46>
 8003cb0:	6811      	ldr	r1, [r2, #0]
 8003cb2:	1855      	adds	r5, r2, r1
 8003cb4:	42a5      	cmp	r5, r4
 8003cb6:	d10b      	bne.n	8003cd0 <_free_r+0x70>
 8003cb8:	6824      	ldr	r4, [r4, #0]
 8003cba:	4421      	add	r1, r4
 8003cbc:	1854      	adds	r4, r2, r1
 8003cbe:	42a3      	cmp	r3, r4
 8003cc0:	6011      	str	r1, [r2, #0]
 8003cc2:	d1e0      	bne.n	8003c86 <_free_r+0x26>
 8003cc4:	681c      	ldr	r4, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	6053      	str	r3, [r2, #4]
 8003cca:	440c      	add	r4, r1
 8003ccc:	6014      	str	r4, [r2, #0]
 8003cce:	e7da      	b.n	8003c86 <_free_r+0x26>
 8003cd0:	d902      	bls.n	8003cd8 <_free_r+0x78>
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	6003      	str	r3, [r0, #0]
 8003cd6:	e7d6      	b.n	8003c86 <_free_r+0x26>
 8003cd8:	6825      	ldr	r5, [r4, #0]
 8003cda:	1961      	adds	r1, r4, r5
 8003cdc:	428b      	cmp	r3, r1
 8003cde:	bf04      	itt	eq
 8003ce0:	6819      	ldreq	r1, [r3, #0]
 8003ce2:	685b      	ldreq	r3, [r3, #4]
 8003ce4:	6063      	str	r3, [r4, #4]
 8003ce6:	bf04      	itt	eq
 8003ce8:	1949      	addeq	r1, r1, r5
 8003cea:	6021      	streq	r1, [r4, #0]
 8003cec:	6054      	str	r4, [r2, #4]
 8003cee:	e7ca      	b.n	8003c86 <_free_r+0x26>
 8003cf0:	b003      	add	sp, #12
 8003cf2:	bd30      	pop	{r4, r5, pc}
 8003cf4:	20018988 	.word	0x20018988

08003cf8 <sbrk_aligned>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4e0e      	ldr	r6, [pc, #56]	; (8003d34 <sbrk_aligned+0x3c>)
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	6831      	ldr	r1, [r6, #0]
 8003d00:	4605      	mov	r5, r0
 8003d02:	b911      	cbnz	r1, 8003d0a <sbrk_aligned+0x12>
 8003d04:	f000 fba6 	bl	8004454 <_sbrk_r>
 8003d08:	6030      	str	r0, [r6, #0]
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f000 fba1 	bl	8004454 <_sbrk_r>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	d00a      	beq.n	8003d2c <sbrk_aligned+0x34>
 8003d16:	1cc4      	adds	r4, r0, #3
 8003d18:	f024 0403 	bic.w	r4, r4, #3
 8003d1c:	42a0      	cmp	r0, r4
 8003d1e:	d007      	beq.n	8003d30 <sbrk_aligned+0x38>
 8003d20:	1a21      	subs	r1, r4, r0
 8003d22:	4628      	mov	r0, r5
 8003d24:	f000 fb96 	bl	8004454 <_sbrk_r>
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d101      	bne.n	8003d30 <sbrk_aligned+0x38>
 8003d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8003d30:	4620      	mov	r0, r4
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	2001898c 	.word	0x2001898c

08003d38 <_malloc_r>:
 8003d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d3c:	1ccd      	adds	r5, r1, #3
 8003d3e:	f025 0503 	bic.w	r5, r5, #3
 8003d42:	3508      	adds	r5, #8
 8003d44:	2d0c      	cmp	r5, #12
 8003d46:	bf38      	it	cc
 8003d48:	250c      	movcc	r5, #12
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	4607      	mov	r7, r0
 8003d4e:	db01      	blt.n	8003d54 <_malloc_r+0x1c>
 8003d50:	42a9      	cmp	r1, r5
 8003d52:	d905      	bls.n	8003d60 <_malloc_r+0x28>
 8003d54:	230c      	movs	r3, #12
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	2600      	movs	r6, #0
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e34 <_malloc_r+0xfc>
 8003d64:	f000 f868 	bl	8003e38 <__malloc_lock>
 8003d68:	f8d8 3000 	ldr.w	r3, [r8]
 8003d6c:	461c      	mov	r4, r3
 8003d6e:	bb5c      	cbnz	r4, 8003dc8 <_malloc_r+0x90>
 8003d70:	4629      	mov	r1, r5
 8003d72:	4638      	mov	r0, r7
 8003d74:	f7ff ffc0 	bl	8003cf8 <sbrk_aligned>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	d155      	bne.n	8003e2a <_malloc_r+0xf2>
 8003d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8003d82:	4626      	mov	r6, r4
 8003d84:	2e00      	cmp	r6, #0
 8003d86:	d145      	bne.n	8003e14 <_malloc_r+0xdc>
 8003d88:	2c00      	cmp	r4, #0
 8003d8a:	d048      	beq.n	8003e1e <_malloc_r+0xe6>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4638      	mov	r0, r7
 8003d92:	eb04 0903 	add.w	r9, r4, r3
 8003d96:	f000 fb5d 	bl	8004454 <_sbrk_r>
 8003d9a:	4581      	cmp	r9, r0
 8003d9c:	d13f      	bne.n	8003e1e <_malloc_r+0xe6>
 8003d9e:	6821      	ldr	r1, [r4, #0]
 8003da0:	1a6d      	subs	r5, r5, r1
 8003da2:	4629      	mov	r1, r5
 8003da4:	4638      	mov	r0, r7
 8003da6:	f7ff ffa7 	bl	8003cf8 <sbrk_aligned>
 8003daa:	3001      	adds	r0, #1
 8003dac:	d037      	beq.n	8003e1e <_malloc_r+0xe6>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	442b      	add	r3, r5
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	f8d8 3000 	ldr.w	r3, [r8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d038      	beq.n	8003e2e <_malloc_r+0xf6>
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	42a2      	cmp	r2, r4
 8003dc0:	d12b      	bne.n	8003e1a <_malloc_r+0xe2>
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	e00f      	b.n	8003de8 <_malloc_r+0xb0>
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	1b52      	subs	r2, r2, r5
 8003dcc:	d41f      	bmi.n	8003e0e <_malloc_r+0xd6>
 8003dce:	2a0b      	cmp	r2, #11
 8003dd0:	d917      	bls.n	8003e02 <_malloc_r+0xca>
 8003dd2:	1961      	adds	r1, r4, r5
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	6025      	str	r5, [r4, #0]
 8003dd8:	bf18      	it	ne
 8003dda:	6059      	strne	r1, [r3, #4]
 8003ddc:	6863      	ldr	r3, [r4, #4]
 8003dde:	bf08      	it	eq
 8003de0:	f8c8 1000 	streq.w	r1, [r8]
 8003de4:	5162      	str	r2, [r4, r5]
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	4638      	mov	r0, r7
 8003dea:	f104 060b 	add.w	r6, r4, #11
 8003dee:	f000 f829 	bl	8003e44 <__malloc_unlock>
 8003df2:	f026 0607 	bic.w	r6, r6, #7
 8003df6:	1d23      	adds	r3, r4, #4
 8003df8:	1af2      	subs	r2, r6, r3
 8003dfa:	d0ae      	beq.n	8003d5a <_malloc_r+0x22>
 8003dfc:	1b9b      	subs	r3, r3, r6
 8003dfe:	50a3      	str	r3, [r4, r2]
 8003e00:	e7ab      	b.n	8003d5a <_malloc_r+0x22>
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	6862      	ldr	r2, [r4, #4]
 8003e06:	d1dd      	bne.n	8003dc4 <_malloc_r+0x8c>
 8003e08:	f8c8 2000 	str.w	r2, [r8]
 8003e0c:	e7ec      	b.n	8003de8 <_malloc_r+0xb0>
 8003e0e:	4623      	mov	r3, r4
 8003e10:	6864      	ldr	r4, [r4, #4]
 8003e12:	e7ac      	b.n	8003d6e <_malloc_r+0x36>
 8003e14:	4634      	mov	r4, r6
 8003e16:	6876      	ldr	r6, [r6, #4]
 8003e18:	e7b4      	b.n	8003d84 <_malloc_r+0x4c>
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	e7cc      	b.n	8003db8 <_malloc_r+0x80>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4638      	mov	r0, r7
 8003e24:	f000 f80e 	bl	8003e44 <__malloc_unlock>
 8003e28:	e797      	b.n	8003d5a <_malloc_r+0x22>
 8003e2a:	6025      	str	r5, [r4, #0]
 8003e2c:	e7dc      	b.n	8003de8 <_malloc_r+0xb0>
 8003e2e:	605b      	str	r3, [r3, #4]
 8003e30:	deff      	udf	#255	; 0xff
 8003e32:	bf00      	nop
 8003e34:	20018988 	.word	0x20018988

08003e38 <__malloc_lock>:
 8003e38:	4801      	ldr	r0, [pc, #4]	; (8003e40 <__malloc_lock+0x8>)
 8003e3a:	f7ff bf0f 	b.w	8003c5c <__retarget_lock_acquire_recursive>
 8003e3e:	bf00      	nop
 8003e40:	20018984 	.word	0x20018984

08003e44 <__malloc_unlock>:
 8003e44:	4801      	ldr	r0, [pc, #4]	; (8003e4c <__malloc_unlock+0x8>)
 8003e46:	f7ff bf0a 	b.w	8003c5e <__retarget_lock_release_recursive>
 8003e4a:	bf00      	nop
 8003e4c:	20018984 	.word	0x20018984

08003e50 <__ssputs_r>:
 8003e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e54:	688e      	ldr	r6, [r1, #8]
 8003e56:	461f      	mov	r7, r3
 8003e58:	42be      	cmp	r6, r7
 8003e5a:	680b      	ldr	r3, [r1, #0]
 8003e5c:	4682      	mov	sl, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	4690      	mov	r8, r2
 8003e62:	d82c      	bhi.n	8003ebe <__ssputs_r+0x6e>
 8003e64:	898a      	ldrh	r2, [r1, #12]
 8003e66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e6a:	d026      	beq.n	8003eba <__ssputs_r+0x6a>
 8003e6c:	6965      	ldr	r5, [r4, #20]
 8003e6e:	6909      	ldr	r1, [r1, #16]
 8003e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e74:	eba3 0901 	sub.w	r9, r3, r1
 8003e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e7c:	1c7b      	adds	r3, r7, #1
 8003e7e:	444b      	add	r3, r9
 8003e80:	106d      	asrs	r5, r5, #1
 8003e82:	429d      	cmp	r5, r3
 8003e84:	bf38      	it	cc
 8003e86:	461d      	movcc	r5, r3
 8003e88:	0553      	lsls	r3, r2, #21
 8003e8a:	d527      	bpl.n	8003edc <__ssputs_r+0x8c>
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	f7ff ff53 	bl	8003d38 <_malloc_r>
 8003e92:	4606      	mov	r6, r0
 8003e94:	b360      	cbz	r0, 8003ef0 <__ssputs_r+0xa0>
 8003e96:	6921      	ldr	r1, [r4, #16]
 8003e98:	464a      	mov	r2, r9
 8003e9a:	f000 faeb 	bl	8004474 <memcpy>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea8:	81a3      	strh	r3, [r4, #12]
 8003eaa:	6126      	str	r6, [r4, #16]
 8003eac:	6165      	str	r5, [r4, #20]
 8003eae:	444e      	add	r6, r9
 8003eb0:	eba5 0509 	sub.w	r5, r5, r9
 8003eb4:	6026      	str	r6, [r4, #0]
 8003eb6:	60a5      	str	r5, [r4, #8]
 8003eb8:	463e      	mov	r6, r7
 8003eba:	42be      	cmp	r6, r7
 8003ebc:	d900      	bls.n	8003ec0 <__ssputs_r+0x70>
 8003ebe:	463e      	mov	r6, r7
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	f000 faab 	bl	8004420 <memmove>
 8003eca:	68a3      	ldr	r3, [r4, #8]
 8003ecc:	1b9b      	subs	r3, r3, r6
 8003ece:	60a3      	str	r3, [r4, #8]
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	4433      	add	r3, r6
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003edc:	462a      	mov	r2, r5
 8003ede:	f000 fad7 	bl	8004490 <_realloc_r>
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1e0      	bne.n	8003eaa <__ssputs_r+0x5a>
 8003ee8:	6921      	ldr	r1, [r4, #16]
 8003eea:	4650      	mov	r0, sl
 8003eec:	f7ff feb8 	bl	8003c60 <_free_r>
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	f8ca 3000 	str.w	r3, [sl]
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003efc:	81a3      	strh	r3, [r4, #12]
 8003efe:	f04f 30ff 	mov.w	r0, #4294967295
 8003f02:	e7e9      	b.n	8003ed8 <__ssputs_r+0x88>

08003f04 <_svfiprintf_r>:
 8003f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f08:	4698      	mov	r8, r3
 8003f0a:	898b      	ldrh	r3, [r1, #12]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	b09d      	sub	sp, #116	; 0x74
 8003f10:	4607      	mov	r7, r0
 8003f12:	460d      	mov	r5, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	d50e      	bpl.n	8003f36 <_svfiprintf_r+0x32>
 8003f18:	690b      	ldr	r3, [r1, #16]
 8003f1a:	b963      	cbnz	r3, 8003f36 <_svfiprintf_r+0x32>
 8003f1c:	2140      	movs	r1, #64	; 0x40
 8003f1e:	f7ff ff0b 	bl	8003d38 <_malloc_r>
 8003f22:	6028      	str	r0, [r5, #0]
 8003f24:	6128      	str	r0, [r5, #16]
 8003f26:	b920      	cbnz	r0, 8003f32 <_svfiprintf_r+0x2e>
 8003f28:	230c      	movs	r3, #12
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e0d0      	b.n	80040d4 <_svfiprintf_r+0x1d0>
 8003f32:	2340      	movs	r3, #64	; 0x40
 8003f34:	616b      	str	r3, [r5, #20]
 8003f36:	2300      	movs	r3, #0
 8003f38:	9309      	str	r3, [sp, #36]	; 0x24
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f44:	2330      	movs	r3, #48	; 0x30
 8003f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040ec <_svfiprintf_r+0x1e8>
 8003f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f4e:	f04f 0901 	mov.w	r9, #1
 8003f52:	4623      	mov	r3, r4
 8003f54:	469a      	mov	sl, r3
 8003f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f5a:	b10a      	cbz	r2, 8003f60 <_svfiprintf_r+0x5c>
 8003f5c:	2a25      	cmp	r2, #37	; 0x25
 8003f5e:	d1f9      	bne.n	8003f54 <_svfiprintf_r+0x50>
 8003f60:	ebba 0b04 	subs.w	fp, sl, r4
 8003f64:	d00b      	beq.n	8003f7e <_svfiprintf_r+0x7a>
 8003f66:	465b      	mov	r3, fp
 8003f68:	4622      	mov	r2, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f7ff ff6f 	bl	8003e50 <__ssputs_r>
 8003f72:	3001      	adds	r0, #1
 8003f74:	f000 80a9 	beq.w	80040ca <_svfiprintf_r+0x1c6>
 8003f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f7a:	445a      	add	r2, fp
 8003f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80a1 	beq.w	80040ca <_svfiprintf_r+0x1c6>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f92:	f10a 0a01 	add.w	sl, sl, #1
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	9307      	str	r3, [sp, #28]
 8003f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003fa0:	4654      	mov	r4, sl
 8003fa2:	2205      	movs	r2, #5
 8003fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa8:	4850      	ldr	r0, [pc, #320]	; (80040ec <_svfiprintf_r+0x1e8>)
 8003faa:	f7fc f919 	bl	80001e0 <memchr>
 8003fae:	9a04      	ldr	r2, [sp, #16]
 8003fb0:	b9d8      	cbnz	r0, 8003fea <_svfiprintf_r+0xe6>
 8003fb2:	06d0      	lsls	r0, r2, #27
 8003fb4:	bf44      	itt	mi
 8003fb6:	2320      	movmi	r3, #32
 8003fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fbc:	0711      	lsls	r1, r2, #28
 8003fbe:	bf44      	itt	mi
 8003fc0:	232b      	movmi	r3, #43	; 0x2b
 8003fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fca:	2b2a      	cmp	r3, #42	; 0x2a
 8003fcc:	d015      	beq.n	8003ffa <_svfiprintf_r+0xf6>
 8003fce:	9a07      	ldr	r2, [sp, #28]
 8003fd0:	4654      	mov	r4, sl
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f04f 0c0a 	mov.w	ip, #10
 8003fd8:	4621      	mov	r1, r4
 8003fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fde:	3b30      	subs	r3, #48	; 0x30
 8003fe0:	2b09      	cmp	r3, #9
 8003fe2:	d94d      	bls.n	8004080 <_svfiprintf_r+0x17c>
 8003fe4:	b1b0      	cbz	r0, 8004014 <_svfiprintf_r+0x110>
 8003fe6:	9207      	str	r2, [sp, #28]
 8003fe8:	e014      	b.n	8004014 <_svfiprintf_r+0x110>
 8003fea:	eba0 0308 	sub.w	r3, r0, r8
 8003fee:	fa09 f303 	lsl.w	r3, r9, r3
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	9304      	str	r3, [sp, #16]
 8003ff6:	46a2      	mov	sl, r4
 8003ff8:	e7d2      	b.n	8003fa0 <_svfiprintf_r+0x9c>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	1d19      	adds	r1, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	9103      	str	r1, [sp, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfbb      	ittet	lt
 8004006:	425b      	neglt	r3, r3
 8004008:	f042 0202 	orrlt.w	r2, r2, #2
 800400c:	9307      	strge	r3, [sp, #28]
 800400e:	9307      	strlt	r3, [sp, #28]
 8004010:	bfb8      	it	lt
 8004012:	9204      	strlt	r2, [sp, #16]
 8004014:	7823      	ldrb	r3, [r4, #0]
 8004016:	2b2e      	cmp	r3, #46	; 0x2e
 8004018:	d10c      	bne.n	8004034 <_svfiprintf_r+0x130>
 800401a:	7863      	ldrb	r3, [r4, #1]
 800401c:	2b2a      	cmp	r3, #42	; 0x2a
 800401e:	d134      	bne.n	800408a <_svfiprintf_r+0x186>
 8004020:	9b03      	ldr	r3, [sp, #12]
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9203      	str	r2, [sp, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bfb8      	it	lt
 800402c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004030:	3402      	adds	r4, #2
 8004032:	9305      	str	r3, [sp, #20]
 8004034:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80040fc <_svfiprintf_r+0x1f8>
 8004038:	7821      	ldrb	r1, [r4, #0]
 800403a:	2203      	movs	r2, #3
 800403c:	4650      	mov	r0, sl
 800403e:	f7fc f8cf 	bl	80001e0 <memchr>
 8004042:	b138      	cbz	r0, 8004054 <_svfiprintf_r+0x150>
 8004044:	9b04      	ldr	r3, [sp, #16]
 8004046:	eba0 000a 	sub.w	r0, r0, sl
 800404a:	2240      	movs	r2, #64	; 0x40
 800404c:	4082      	lsls	r2, r0
 800404e:	4313      	orrs	r3, r2
 8004050:	3401      	adds	r4, #1
 8004052:	9304      	str	r3, [sp, #16]
 8004054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004058:	4825      	ldr	r0, [pc, #148]	; (80040f0 <_svfiprintf_r+0x1ec>)
 800405a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800405e:	2206      	movs	r2, #6
 8004060:	f7fc f8be 	bl	80001e0 <memchr>
 8004064:	2800      	cmp	r0, #0
 8004066:	d038      	beq.n	80040da <_svfiprintf_r+0x1d6>
 8004068:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <_svfiprintf_r+0x1f0>)
 800406a:	bb1b      	cbnz	r3, 80040b4 <_svfiprintf_r+0x1b0>
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	3307      	adds	r3, #7
 8004070:	f023 0307 	bic.w	r3, r3, #7
 8004074:	3308      	adds	r3, #8
 8004076:	9303      	str	r3, [sp, #12]
 8004078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407a:	4433      	add	r3, r6
 800407c:	9309      	str	r3, [sp, #36]	; 0x24
 800407e:	e768      	b.n	8003f52 <_svfiprintf_r+0x4e>
 8004080:	fb0c 3202 	mla	r2, ip, r2, r3
 8004084:	460c      	mov	r4, r1
 8004086:	2001      	movs	r0, #1
 8004088:	e7a6      	b.n	8003fd8 <_svfiprintf_r+0xd4>
 800408a:	2300      	movs	r3, #0
 800408c:	3401      	adds	r4, #1
 800408e:	9305      	str	r3, [sp, #20]
 8004090:	4619      	mov	r1, r3
 8004092:	f04f 0c0a 	mov.w	ip, #10
 8004096:	4620      	mov	r0, r4
 8004098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800409c:	3a30      	subs	r2, #48	; 0x30
 800409e:	2a09      	cmp	r2, #9
 80040a0:	d903      	bls.n	80040aa <_svfiprintf_r+0x1a6>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0c6      	beq.n	8004034 <_svfiprintf_r+0x130>
 80040a6:	9105      	str	r1, [sp, #20]
 80040a8:	e7c4      	b.n	8004034 <_svfiprintf_r+0x130>
 80040aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ae:	4604      	mov	r4, r0
 80040b0:	2301      	movs	r3, #1
 80040b2:	e7f0      	b.n	8004096 <_svfiprintf_r+0x192>
 80040b4:	ab03      	add	r3, sp, #12
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	462a      	mov	r2, r5
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <_svfiprintf_r+0x1f4>)
 80040bc:	a904      	add	r1, sp, #16
 80040be:	4638      	mov	r0, r7
 80040c0:	f3af 8000 	nop.w
 80040c4:	1c42      	adds	r2, r0, #1
 80040c6:	4606      	mov	r6, r0
 80040c8:	d1d6      	bne.n	8004078 <_svfiprintf_r+0x174>
 80040ca:	89ab      	ldrh	r3, [r5, #12]
 80040cc:	065b      	lsls	r3, r3, #25
 80040ce:	f53f af2d 	bmi.w	8003f2c <_svfiprintf_r+0x28>
 80040d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d4:	b01d      	add	sp, #116	; 0x74
 80040d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040da:	ab03      	add	r3, sp, #12
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	462a      	mov	r2, r5
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <_svfiprintf_r+0x1f4>)
 80040e2:	a904      	add	r1, sp, #16
 80040e4:	4638      	mov	r0, r7
 80040e6:	f000 f879 	bl	80041dc <_printf_i>
 80040ea:	e7eb      	b.n	80040c4 <_svfiprintf_r+0x1c0>
 80040ec:	080045d8 	.word	0x080045d8
 80040f0:	080045e2 	.word	0x080045e2
 80040f4:	00000000 	.word	0x00000000
 80040f8:	08003e51 	.word	0x08003e51
 80040fc:	080045de 	.word	0x080045de

08004100 <_printf_common>:
 8004100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004104:	4616      	mov	r6, r2
 8004106:	4699      	mov	r9, r3
 8004108:	688a      	ldr	r2, [r1, #8]
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004110:	4293      	cmp	r3, r2
 8004112:	bfb8      	it	lt
 8004114:	4613      	movlt	r3, r2
 8004116:	6033      	str	r3, [r6, #0]
 8004118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800411c:	4607      	mov	r7, r0
 800411e:	460c      	mov	r4, r1
 8004120:	b10a      	cbz	r2, 8004126 <_printf_common+0x26>
 8004122:	3301      	adds	r3, #1
 8004124:	6033      	str	r3, [r6, #0]
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	0699      	lsls	r1, r3, #26
 800412a:	bf42      	ittt	mi
 800412c:	6833      	ldrmi	r3, [r6, #0]
 800412e:	3302      	addmi	r3, #2
 8004130:	6033      	strmi	r3, [r6, #0]
 8004132:	6825      	ldr	r5, [r4, #0]
 8004134:	f015 0506 	ands.w	r5, r5, #6
 8004138:	d106      	bne.n	8004148 <_printf_common+0x48>
 800413a:	f104 0a19 	add.w	sl, r4, #25
 800413e:	68e3      	ldr	r3, [r4, #12]
 8004140:	6832      	ldr	r2, [r6, #0]
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	42ab      	cmp	r3, r5
 8004146:	dc26      	bgt.n	8004196 <_printf_common+0x96>
 8004148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800414c:	1e13      	subs	r3, r2, #0
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	bf18      	it	ne
 8004152:	2301      	movne	r3, #1
 8004154:	0692      	lsls	r2, r2, #26
 8004156:	d42b      	bmi.n	80041b0 <_printf_common+0xb0>
 8004158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800415c:	4649      	mov	r1, r9
 800415e:	4638      	mov	r0, r7
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d01e      	beq.n	80041a4 <_printf_common+0xa4>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	6922      	ldr	r2, [r4, #16]
 800416a:	f003 0306 	and.w	r3, r3, #6
 800416e:	2b04      	cmp	r3, #4
 8004170:	bf02      	ittt	eq
 8004172:	68e5      	ldreq	r5, [r4, #12]
 8004174:	6833      	ldreq	r3, [r6, #0]
 8004176:	1aed      	subeq	r5, r5, r3
 8004178:	68a3      	ldr	r3, [r4, #8]
 800417a:	bf0c      	ite	eq
 800417c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004180:	2500      	movne	r5, #0
 8004182:	4293      	cmp	r3, r2
 8004184:	bfc4      	itt	gt
 8004186:	1a9b      	subgt	r3, r3, r2
 8004188:	18ed      	addgt	r5, r5, r3
 800418a:	2600      	movs	r6, #0
 800418c:	341a      	adds	r4, #26
 800418e:	42b5      	cmp	r5, r6
 8004190:	d11a      	bne.n	80041c8 <_printf_common+0xc8>
 8004192:	2000      	movs	r0, #0
 8004194:	e008      	b.n	80041a8 <_printf_common+0xa8>
 8004196:	2301      	movs	r3, #1
 8004198:	4652      	mov	r2, sl
 800419a:	4649      	mov	r1, r9
 800419c:	4638      	mov	r0, r7
 800419e:	47c0      	blx	r8
 80041a0:	3001      	adds	r0, #1
 80041a2:	d103      	bne.n	80041ac <_printf_common+0xac>
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ac:	3501      	adds	r5, #1
 80041ae:	e7c6      	b.n	800413e <_printf_common+0x3e>
 80041b0:	18e1      	adds	r1, r4, r3
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	2030      	movs	r0, #48	; 0x30
 80041b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ba:	4422      	add	r2, r4
 80041bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041c4:	3302      	adds	r3, #2
 80041c6:	e7c7      	b.n	8004158 <_printf_common+0x58>
 80041c8:	2301      	movs	r3, #1
 80041ca:	4622      	mov	r2, r4
 80041cc:	4649      	mov	r1, r9
 80041ce:	4638      	mov	r0, r7
 80041d0:	47c0      	blx	r8
 80041d2:	3001      	adds	r0, #1
 80041d4:	d0e6      	beq.n	80041a4 <_printf_common+0xa4>
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7d9      	b.n	800418e <_printf_common+0x8e>
	...

080041dc <_printf_i>:
 80041dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e0:	7e0f      	ldrb	r7, [r1, #24]
 80041e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041e4:	2f78      	cmp	r7, #120	; 0x78
 80041e6:	4691      	mov	r9, r2
 80041e8:	4680      	mov	r8, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	469a      	mov	sl, r3
 80041ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041f2:	d807      	bhi.n	8004204 <_printf_i+0x28>
 80041f4:	2f62      	cmp	r7, #98	; 0x62
 80041f6:	d80a      	bhi.n	800420e <_printf_i+0x32>
 80041f8:	2f00      	cmp	r7, #0
 80041fa:	f000 80d4 	beq.w	80043a6 <_printf_i+0x1ca>
 80041fe:	2f58      	cmp	r7, #88	; 0x58
 8004200:	f000 80c0 	beq.w	8004384 <_printf_i+0x1a8>
 8004204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800420c:	e03a      	b.n	8004284 <_printf_i+0xa8>
 800420e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004212:	2b15      	cmp	r3, #21
 8004214:	d8f6      	bhi.n	8004204 <_printf_i+0x28>
 8004216:	a101      	add	r1, pc, #4	; (adr r1, 800421c <_printf_i+0x40>)
 8004218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800421c:	08004275 	.word	0x08004275
 8004220:	08004289 	.word	0x08004289
 8004224:	08004205 	.word	0x08004205
 8004228:	08004205 	.word	0x08004205
 800422c:	08004205 	.word	0x08004205
 8004230:	08004205 	.word	0x08004205
 8004234:	08004289 	.word	0x08004289
 8004238:	08004205 	.word	0x08004205
 800423c:	08004205 	.word	0x08004205
 8004240:	08004205 	.word	0x08004205
 8004244:	08004205 	.word	0x08004205
 8004248:	0800438d 	.word	0x0800438d
 800424c:	080042b5 	.word	0x080042b5
 8004250:	08004347 	.word	0x08004347
 8004254:	08004205 	.word	0x08004205
 8004258:	08004205 	.word	0x08004205
 800425c:	080043af 	.word	0x080043af
 8004260:	08004205 	.word	0x08004205
 8004264:	080042b5 	.word	0x080042b5
 8004268:	08004205 	.word	0x08004205
 800426c:	08004205 	.word	0x08004205
 8004270:	0800434f 	.word	0x0800434f
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	1d1a      	adds	r2, r3, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	602a      	str	r2, [r5, #0]
 800427c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004284:	2301      	movs	r3, #1
 8004286:	e09f      	b.n	80043c8 <_printf_i+0x1ec>
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	0607      	lsls	r7, r0, #24
 800428e:	f103 0104 	add.w	r1, r3, #4
 8004292:	6029      	str	r1, [r5, #0]
 8004294:	d501      	bpl.n	800429a <_printf_i+0xbe>
 8004296:	681e      	ldr	r6, [r3, #0]
 8004298:	e003      	b.n	80042a2 <_printf_i+0xc6>
 800429a:	0646      	lsls	r6, r0, #25
 800429c:	d5fb      	bpl.n	8004296 <_printf_i+0xba>
 800429e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042a2:	2e00      	cmp	r6, #0
 80042a4:	da03      	bge.n	80042ae <_printf_i+0xd2>
 80042a6:	232d      	movs	r3, #45	; 0x2d
 80042a8:	4276      	negs	r6, r6
 80042aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ae:	485a      	ldr	r0, [pc, #360]	; (8004418 <_printf_i+0x23c>)
 80042b0:	230a      	movs	r3, #10
 80042b2:	e012      	b.n	80042da <_printf_i+0xfe>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	6820      	ldr	r0, [r4, #0]
 80042b8:	1d19      	adds	r1, r3, #4
 80042ba:	6029      	str	r1, [r5, #0]
 80042bc:	0605      	lsls	r5, r0, #24
 80042be:	d501      	bpl.n	80042c4 <_printf_i+0xe8>
 80042c0:	681e      	ldr	r6, [r3, #0]
 80042c2:	e002      	b.n	80042ca <_printf_i+0xee>
 80042c4:	0641      	lsls	r1, r0, #25
 80042c6:	d5fb      	bpl.n	80042c0 <_printf_i+0xe4>
 80042c8:	881e      	ldrh	r6, [r3, #0]
 80042ca:	4853      	ldr	r0, [pc, #332]	; (8004418 <_printf_i+0x23c>)
 80042cc:	2f6f      	cmp	r7, #111	; 0x6f
 80042ce:	bf0c      	ite	eq
 80042d0:	2308      	moveq	r3, #8
 80042d2:	230a      	movne	r3, #10
 80042d4:	2100      	movs	r1, #0
 80042d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042da:	6865      	ldr	r5, [r4, #4]
 80042dc:	60a5      	str	r5, [r4, #8]
 80042de:	2d00      	cmp	r5, #0
 80042e0:	bfa2      	ittt	ge
 80042e2:	6821      	ldrge	r1, [r4, #0]
 80042e4:	f021 0104 	bicge.w	r1, r1, #4
 80042e8:	6021      	strge	r1, [r4, #0]
 80042ea:	b90e      	cbnz	r6, 80042f0 <_printf_i+0x114>
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	d04b      	beq.n	8004388 <_printf_i+0x1ac>
 80042f0:	4615      	mov	r5, r2
 80042f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042f6:	fb03 6711 	mls	r7, r3, r1, r6
 80042fa:	5dc7      	ldrb	r7, [r0, r7]
 80042fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004300:	4637      	mov	r7, r6
 8004302:	42bb      	cmp	r3, r7
 8004304:	460e      	mov	r6, r1
 8004306:	d9f4      	bls.n	80042f2 <_printf_i+0x116>
 8004308:	2b08      	cmp	r3, #8
 800430a:	d10b      	bne.n	8004324 <_printf_i+0x148>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	07de      	lsls	r6, r3, #31
 8004310:	d508      	bpl.n	8004324 <_printf_i+0x148>
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	6861      	ldr	r1, [r4, #4]
 8004316:	4299      	cmp	r1, r3
 8004318:	bfde      	ittt	le
 800431a:	2330      	movle	r3, #48	; 0x30
 800431c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004324:	1b52      	subs	r2, r2, r5
 8004326:	6122      	str	r2, [r4, #16]
 8004328:	f8cd a000 	str.w	sl, [sp]
 800432c:	464b      	mov	r3, r9
 800432e:	aa03      	add	r2, sp, #12
 8004330:	4621      	mov	r1, r4
 8004332:	4640      	mov	r0, r8
 8004334:	f7ff fee4 	bl	8004100 <_printf_common>
 8004338:	3001      	adds	r0, #1
 800433a:	d14a      	bne.n	80043d2 <_printf_i+0x1f6>
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	b004      	add	sp, #16
 8004342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	f043 0320 	orr.w	r3, r3, #32
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	4833      	ldr	r0, [pc, #204]	; (800441c <_printf_i+0x240>)
 8004350:	2778      	movs	r7, #120	; 0x78
 8004352:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	6829      	ldr	r1, [r5, #0]
 800435a:	061f      	lsls	r7, r3, #24
 800435c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004360:	d402      	bmi.n	8004368 <_printf_i+0x18c>
 8004362:	065f      	lsls	r7, r3, #25
 8004364:	bf48      	it	mi
 8004366:	b2b6      	uxthmi	r6, r6
 8004368:	07df      	lsls	r7, r3, #31
 800436a:	bf48      	it	mi
 800436c:	f043 0320 	orrmi.w	r3, r3, #32
 8004370:	6029      	str	r1, [r5, #0]
 8004372:	bf48      	it	mi
 8004374:	6023      	strmi	r3, [r4, #0]
 8004376:	b91e      	cbnz	r6, 8004380 <_printf_i+0x1a4>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	f023 0320 	bic.w	r3, r3, #32
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	2310      	movs	r3, #16
 8004382:	e7a7      	b.n	80042d4 <_printf_i+0xf8>
 8004384:	4824      	ldr	r0, [pc, #144]	; (8004418 <_printf_i+0x23c>)
 8004386:	e7e4      	b.n	8004352 <_printf_i+0x176>
 8004388:	4615      	mov	r5, r2
 800438a:	e7bd      	b.n	8004308 <_printf_i+0x12c>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	6826      	ldr	r6, [r4, #0]
 8004390:	6961      	ldr	r1, [r4, #20]
 8004392:	1d18      	adds	r0, r3, #4
 8004394:	6028      	str	r0, [r5, #0]
 8004396:	0635      	lsls	r5, r6, #24
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	d501      	bpl.n	80043a0 <_printf_i+0x1c4>
 800439c:	6019      	str	r1, [r3, #0]
 800439e:	e002      	b.n	80043a6 <_printf_i+0x1ca>
 80043a0:	0670      	lsls	r0, r6, #25
 80043a2:	d5fb      	bpl.n	800439c <_printf_i+0x1c0>
 80043a4:	8019      	strh	r1, [r3, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	4615      	mov	r5, r2
 80043ac:	e7bc      	b.n	8004328 <_printf_i+0x14c>
 80043ae:	682b      	ldr	r3, [r5, #0]
 80043b0:	1d1a      	adds	r2, r3, #4
 80043b2:	602a      	str	r2, [r5, #0]
 80043b4:	681d      	ldr	r5, [r3, #0]
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4628      	mov	r0, r5
 80043bc:	f7fb ff10 	bl	80001e0 <memchr>
 80043c0:	b108      	cbz	r0, 80043c6 <_printf_i+0x1ea>
 80043c2:	1b40      	subs	r0, r0, r5
 80043c4:	6060      	str	r0, [r4, #4]
 80043c6:	6863      	ldr	r3, [r4, #4]
 80043c8:	6123      	str	r3, [r4, #16]
 80043ca:	2300      	movs	r3, #0
 80043cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d0:	e7aa      	b.n	8004328 <_printf_i+0x14c>
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	462a      	mov	r2, r5
 80043d6:	4649      	mov	r1, r9
 80043d8:	4640      	mov	r0, r8
 80043da:	47d0      	blx	sl
 80043dc:	3001      	adds	r0, #1
 80043de:	d0ad      	beq.n	800433c <_printf_i+0x160>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	079b      	lsls	r3, r3, #30
 80043e4:	d413      	bmi.n	800440e <_printf_i+0x232>
 80043e6:	68e0      	ldr	r0, [r4, #12]
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	4298      	cmp	r0, r3
 80043ec:	bfb8      	it	lt
 80043ee:	4618      	movlt	r0, r3
 80043f0:	e7a6      	b.n	8004340 <_printf_i+0x164>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4632      	mov	r2, r6
 80043f6:	4649      	mov	r1, r9
 80043f8:	4640      	mov	r0, r8
 80043fa:	47d0      	blx	sl
 80043fc:	3001      	adds	r0, #1
 80043fe:	d09d      	beq.n	800433c <_printf_i+0x160>
 8004400:	3501      	adds	r5, #1
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	9903      	ldr	r1, [sp, #12]
 8004406:	1a5b      	subs	r3, r3, r1
 8004408:	42ab      	cmp	r3, r5
 800440a:	dcf2      	bgt.n	80043f2 <_printf_i+0x216>
 800440c:	e7eb      	b.n	80043e6 <_printf_i+0x20a>
 800440e:	2500      	movs	r5, #0
 8004410:	f104 0619 	add.w	r6, r4, #25
 8004414:	e7f5      	b.n	8004402 <_printf_i+0x226>
 8004416:	bf00      	nop
 8004418:	080045e9 	.word	0x080045e9
 800441c:	080045fa 	.word	0x080045fa

08004420 <memmove>:
 8004420:	4288      	cmp	r0, r1
 8004422:	b510      	push	{r4, lr}
 8004424:	eb01 0402 	add.w	r4, r1, r2
 8004428:	d902      	bls.n	8004430 <memmove+0x10>
 800442a:	4284      	cmp	r4, r0
 800442c:	4623      	mov	r3, r4
 800442e:	d807      	bhi.n	8004440 <memmove+0x20>
 8004430:	1e43      	subs	r3, r0, #1
 8004432:	42a1      	cmp	r1, r4
 8004434:	d008      	beq.n	8004448 <memmove+0x28>
 8004436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800443a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800443e:	e7f8      	b.n	8004432 <memmove+0x12>
 8004440:	4402      	add	r2, r0
 8004442:	4601      	mov	r1, r0
 8004444:	428a      	cmp	r2, r1
 8004446:	d100      	bne.n	800444a <memmove+0x2a>
 8004448:	bd10      	pop	{r4, pc}
 800444a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800444e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004452:	e7f7      	b.n	8004444 <memmove+0x24>

08004454 <_sbrk_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4d06      	ldr	r5, [pc, #24]	; (8004470 <_sbrk_r+0x1c>)
 8004458:	2300      	movs	r3, #0
 800445a:	4604      	mov	r4, r0
 800445c:	4608      	mov	r0, r1
 800445e:	602b      	str	r3, [r5, #0]
 8004460:	f7fc fce8 	bl	8000e34 <_sbrk>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d102      	bne.n	800446e <_sbrk_r+0x1a>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	b103      	cbz	r3, 800446e <_sbrk_r+0x1a>
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	20018980 	.word	0x20018980

08004474 <memcpy>:
 8004474:	440a      	add	r2, r1
 8004476:	4291      	cmp	r1, r2
 8004478:	f100 33ff 	add.w	r3, r0, #4294967295
 800447c:	d100      	bne.n	8004480 <memcpy+0xc>
 800447e:	4770      	bx	lr
 8004480:	b510      	push	{r4, lr}
 8004482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800448a:	4291      	cmp	r1, r2
 800448c:	d1f9      	bne.n	8004482 <memcpy+0xe>
 800448e:	bd10      	pop	{r4, pc}

08004490 <_realloc_r>:
 8004490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004494:	4680      	mov	r8, r0
 8004496:	4614      	mov	r4, r2
 8004498:	460e      	mov	r6, r1
 800449a:	b921      	cbnz	r1, 80044a6 <_realloc_r+0x16>
 800449c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	4611      	mov	r1, r2
 80044a2:	f7ff bc49 	b.w	8003d38 <_malloc_r>
 80044a6:	b92a      	cbnz	r2, 80044b4 <_realloc_r+0x24>
 80044a8:	f7ff fbda 	bl	8003c60 <_free_r>
 80044ac:	4625      	mov	r5, r4
 80044ae:	4628      	mov	r0, r5
 80044b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b4:	f000 f81b 	bl	80044ee <_malloc_usable_size_r>
 80044b8:	4284      	cmp	r4, r0
 80044ba:	4607      	mov	r7, r0
 80044bc:	d802      	bhi.n	80044c4 <_realloc_r+0x34>
 80044be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044c2:	d812      	bhi.n	80044ea <_realloc_r+0x5a>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4640      	mov	r0, r8
 80044c8:	f7ff fc36 	bl	8003d38 <_malloc_r>
 80044cc:	4605      	mov	r5, r0
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d0ed      	beq.n	80044ae <_realloc_r+0x1e>
 80044d2:	42bc      	cmp	r4, r7
 80044d4:	4622      	mov	r2, r4
 80044d6:	4631      	mov	r1, r6
 80044d8:	bf28      	it	cs
 80044da:	463a      	movcs	r2, r7
 80044dc:	f7ff ffca 	bl	8004474 <memcpy>
 80044e0:	4631      	mov	r1, r6
 80044e2:	4640      	mov	r0, r8
 80044e4:	f7ff fbbc 	bl	8003c60 <_free_r>
 80044e8:	e7e1      	b.n	80044ae <_realloc_r+0x1e>
 80044ea:	4635      	mov	r5, r6
 80044ec:	e7df      	b.n	80044ae <_realloc_r+0x1e>

080044ee <_malloc_usable_size_r>:
 80044ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f2:	1f18      	subs	r0, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bfbc      	itt	lt
 80044f8:	580b      	ldrlt	r3, [r1, r0]
 80044fa:	18c0      	addlt	r0, r0, r3
 80044fc:	4770      	bx	lr
	...

08004500 <_init>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr

0800450c <_fini>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr
